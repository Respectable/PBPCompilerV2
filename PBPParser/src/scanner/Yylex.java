/* The following code was generated by JFlex 1.4.3 on 7/8/13 4:24 PM */

package scanner;

import java_cup.runtime.*;
import parser.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/8/13 4:24 PM from the specification file
 * <tt>PBP.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PLAYINFO = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\2\0\1\105"+
    "\3\0\1\12\1\102\1\103\2\0\1\104\1\73\1\63\1\0\1\13"+
    "\1\4\1\5\1\33\1\34\1\7\1\36\1\100\2\10\1\6\6\0"+
    "\1\60\1\47\1\42\1\53\1\30\1\56\1\72\1\65\1\55\1\62"+
    "\1\67\1\46\1\66\1\70\1\22\1\23\1\11\1\61\1\14\1\27"+
    "\1\57\1\52\1\77\1\11\1\75\1\11\6\0\1\16\1\54\1\44"+
    "\1\26\1\24\1\21\1\50\1\35\1\25\1\74\1\45\1\43\1\37"+
    "\1\31\1\20\1\51\1\11\1\17\1\32\1\15\1\40\1\41\1\71"+
    "\1\76\1\64\1\11\1\101\1\0\1\106\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\2\1\3\2\2\1\4\1\5\1\2"+
    "\6\4\1\6\1\7\2\4\3\2\16\4\1\10\5\4"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\2\2"+
    "\1\17\1\20\1\21\1\22\4\0\12\4\1\23\1\4"+
    "\1\24\3\4\1\24\1\25\12\4\1\26\2\4\1\27"+
    "\1\30\2\4\1\31\15\4\4\0\1\32\23\4\1\33"+
    "\16\4\1\34\15\4\1\35\2\4\1\2\1\0\1\36"+
    "\1\37\1\40\2\4\1\41\1\4\1\42\4\4\1\43"+
    "\5\4\1\44\1\45\1\46\2\4\1\45\5\4\1\47"+
    "\14\4\1\50\5\4\1\51\1\52\4\4\1\53\1\54"+
    "\1\55\1\56\1\32\11\4\1\57\10\4\1\60\6\4"+
    "\1\61\13\4\1\62\6\4\1\63\7\4\1\64\16\4"+
    "\2\0\1\65\2\4\1\66\2\4\1\67\3\4\1\70"+
    "\4\4\1\71\6\4\1\72\1\73\1\4\1\74\5\4"+
    "\1\75\3\4\1\76\1\4\1\77\6\4\1\100\7\4"+
    "\1\101\2\4\1\102\1\4\1\103\1\4\1\104\1\105"+
    "\5\4\1\106\6\4\1\61\2\4\1\107\4\4\1\110"+
    "\1\111\1\112\2\4\1\113\6\4\1\114\1\4\1\115"+
    "\2\4\1\64\5\4\1\116\1\117\1\4\1\120\1\4"+
    "\1\121\3\4\2\0\1\122\1\123\1\4\1\124\6\4"+
    "\1\125\21\4\1\126\10\4\1\127\1\130\1\4\1\131"+
    "\1\132\4\4\1\133\1\134\1\135\6\4\1\136\6\4"+
    "\1\137\6\4\1\140\17\4\1\141\2\4\1\142\1\143"+
    "\11\4\1\144\3\4\1\145\1\4\1\146\6\4\1\147"+
    "\1\150\1\4\1\151\1\152\2\4\1\153\1\4\1\154"+
    "\4\4\1\155\7\4\1\156\3\4\1\157\4\4\1\160"+
    "\3\4\1\161\1\162\1\4\1\163\1\164\3\4\1\165"+
    "\10\4\1\166\1\4\1\167\1\170\4\4\1\171\10\4"+
    "\1\172\1\173\1\174\2\4\1\175\1\176\1\177\1\200"+
    "\6\4\1\201\1\202\1\203\1\204\3\4\1\205\1\206"+
    "\1\207\1\4\1\210\1\211\1\212\1\213\1\214\1\4"+
    "\1\215\3\4\1\216\1\217\1\220\1\221\5\4\1\222"+
    "\1\223\1\224\1\223\5\4\1\225\1\4\1\226\1\227"+
    "\1\4\1\230\1\4\1\231\1\232\7\4\1\233\1\234"+
    "\1\235\7\4\1\236\1\4\1\237\3\4\1\240\26\4"+
    "\1\241\1\4\1\242\2\4\1\243\1\244";

  private static int [] zzUnpackAction() {
    int [] result = new int[709];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\325\0\u01aa"+
    "\0\u01f1\0\u0238\0\325\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3"+
    "\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\325"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\325\0\u0ba6\0\325"+
    "\0\325\0\325\0\325\0\325\0\u0bed\0\325\0\325\0\325"+
    "\0\325\0\325\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u0238\0\u1016\0\u0238\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u0238"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a"+
    "\0\u13b1\0\u13f8\0\u0238\0\u143f\0\u1486\0\u0238\0\u0238\0\u14cd"+
    "\0\u1514\0\u0238\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be"+
    "\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e"+
    "\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66"+
    "\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u0238"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f"+
    "\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u0238\0\u2380"+
    "\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\325\0\325\0\325\0\u287e\0\u28c5\0\u290c\0\u2953"+
    "\0\u0238\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u0238\0\u2ab6\0\u2afd"+
    "\0\u2b44\0\u2b8b\0\u2bd2\0\u0238\0\u2c19\0\u0238\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u0238\0\u2e98"+
    "\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u315e\0\u31a5\0\u0238\0\u31ec\0\u3233\0\u327a\0\u32c1"+
    "\0\u3308\0\u0238\0\u0238\0\u334f\0\u3396\0\u33dd\0\u3424\0\325"+
    "\0\325\0\325\0\325\0\u0238\0\u346b\0\u34b2\0\u34f9\0\u3540"+
    "\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u0238\0\u36ea\0\u3731"+
    "\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u0238\0\u3922"+
    "\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a"+
    "\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92"+
    "\0\u3dd9\0\u0238\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83"+
    "\0\u0238\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174"+
    "\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac"+
    "\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4"+
    "\0\u462b\0\325\0\u4672\0\u46b9\0\u0238\0\u4700\0\u4747\0\u0238"+
    "\0\u478e\0\u47d5\0\u481c\0\u0238\0\u4863\0\u48aa\0\u48f1\0\u4938"+
    "\0\u0238\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2\0\u0238"+
    "\0\u0238\0\u4b29\0\u0238\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c"+
    "\0\u0238\0\u4cd3\0\u4d1a\0\u4d61\0\u0238\0\u4da8\0\u0238\0\u4def"+
    "\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52\0\u0238\0\u4f99\0\u4fe0"+
    "\0\u5027\0\u506e\0\u50b5\0\u50fc\0\u5143\0\u0238\0\u518a\0\u51d1"+
    "\0\u0238\0\u5218\0\u0238\0\u525f\0\u0238\0\u52a6\0\u52ed\0\u5334"+
    "\0\u537b\0\u53c2\0\u5409\0\u0238\0\u5450\0\u5497\0\u54de\0\u5525"+
    "\0\u556c\0\u55b3\0\u0238\0\u55fa\0\u5641\0\u0238\0\u5688\0\u56cf"+
    "\0\u5716\0\u575d\0\u57a4\0\u0238\0\u0238\0\u57eb\0\u5832\0\u0238"+
    "\0\u5879\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u0238\0\u5a23"+
    "\0\u0238\0\u5a6a\0\u5ab1\0\u0238\0\u5af8\0\u5b3f\0\u5b86\0\u5bcd"+
    "\0\u5c14\0\u5c5b\0\u0238\0\u5ca2\0\u0238\0\u5ce9\0\u0238\0\u5d30"+
    "\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u0238\0\u0238\0\u5e93\0\u0238"+
    "\0\u5eda\0\u5f21\0\u5f68\0\u5faf\0\u5ff6\0\u603d\0\u0238\0\u6084"+
    "\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u622e\0\u6275\0\u62bc"+
    "\0\u6303\0\u634a\0\u6391\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u64f4"+
    "\0\u0238\0\u653b\0\u6582\0\u65c9\0\u6610\0\u6657\0\u669e\0\u66e5"+
    "\0\u672c\0\u0238\0\u0238\0\u6773\0\u0238\0\u0238\0\u67ba\0\u6801"+
    "\0\u6848\0\u688f\0\u0238\0\u0238\0\u0238\0\u68d6\0\u691d\0\u6964"+
    "\0\u69ab\0\u69f2\0\u6a39\0\u0238\0\u6a80\0\u6ac7\0\u6b0e\0\u6b55"+
    "\0\u6b9c\0\u6be3\0\u0238\0\u6c2a\0\u6c71\0\u6cb8\0\u6cff\0\u6d46"+
    "\0\u6d8d\0\u0238\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37"+
    "\0\u6f7e\0\u6fc5\0\u700c\0\u7053\0\u709a\0\u70e1\0\u7128\0\u716f"+
    "\0\325\0\u0238\0\u71b6\0\u71fd\0\u0238\0\u0238\0\u7244\0\u728b"+
    "\0\u72d2\0\u7319\0\u7360\0\u73a7\0\u73ee\0\u7435\0\u747c\0\u0238"+
    "\0\u74c3\0\u750a\0\u7551\0\u0238\0\u7598\0\u0238\0\u75df\0\u7626"+
    "\0\u766d\0\u76b4\0\u76fb\0\u7742\0\u0238\0\u0238\0\u7789\0\u0238"+
    "\0\u0238\0\u77d0\0\u7817\0\u0238\0\u785e\0\u0238\0\u78a5\0\u78ec"+
    "\0\u7933\0\u797a\0\u0238\0\u79c1\0\u7a08\0\u7a4f\0\u7a96\0\u7add"+
    "\0\u7b24\0\u7b6b\0\u0238\0\u7bb2\0\u7bf9\0\u7c40\0\u0238\0\u7c87"+
    "\0\u7cce\0\u7d15\0\u7d5c\0\u0238\0\u7da3\0\u7dea\0\u7e31\0\u0238"+
    "\0\u0238\0\u7e78\0\u0238\0\u0238\0\u7ebf\0\u7f06\0\u7f4d\0\u0238"+
    "\0\u7f94\0\u7fdb\0\u8022\0\u8069\0\u80b0\0\u80f7\0\u813e\0\u8185"+
    "\0\u0238\0\u81cc\0\u0238\0\u0238\0\u8213\0\u825a\0\u82a1\0\u82e8"+
    "\0\u0238\0\u832f\0\u8376\0\u83bd\0\u8404\0\u844b\0\u8492\0\u84d9"+
    "\0\u8520\0\u0238\0\u0238\0\u0238\0\u8567\0\u85ae\0\u0238\0\u0238"+
    "\0\u0238\0\u0238\0\u85f5\0\u863c\0\u8683\0\u86ca\0\u8711\0\u8758"+
    "\0\u0238\0\u0238\0\u0238\0\u0238\0\u879f\0\u87e6\0\u882d\0\u0238"+
    "\0\u0238\0\u0238\0\u8874\0\u0238\0\u0238\0\u0238\0\u0238\0\u0238"+
    "\0\u88bb\0\u0238\0\u8902\0\u8949\0\u8990\0\u0238\0\u0238\0\u0238"+
    "\0\u0238\0\u89d7\0\u8a1e\0\u8a65\0\u8aac\0\u8af3\0\u0238\0\u0238"+
    "\0\u0238\0\u8b3a\0\u8b81\0\u8bc8\0\u8c0f\0\u8c56\0\u8c9d\0\u0238"+
    "\0\u8ce4\0\u0238\0\u0238\0\u8d2b\0\u0238\0\u8d72\0\u0238\0\u0238"+
    "\0\u8db9\0\u8e00\0\u8e47\0\u8e8e\0\u8ed5\0\u8f1c\0\u8f63\0\u0238"+
    "\0\u0238\0\u0238\0\u8faa\0\u8ff1\0\u9038\0\u907f\0\u90c6\0\u910d"+
    "\0\u9154\0\u0238\0\u919b\0\u0238\0\u91e2\0\u9229\0\u9270\0\u0238"+
    "\0\u92b7\0\u92fe\0\u9345\0\u938c\0\u93d3\0\u941a\0\u9461\0\u94a8"+
    "\0\u94ef\0\u9536\0\u957d\0\u95c4\0\u960b\0\u9652\0\u9699\0\u96e0"+
    "\0\u9727\0\u976e\0\u97b5\0\u97fc\0\u9843\0\u988a\0\u0238\0\u98d1"+
    "\0\u0238\0\u9918\0\u995f\0\u0238\0\u0238";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[709];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\12\1\17\1\20"+
    "\1\21\1\22\1\23\3\12\1\24\1\25\1\12\1\26"+
    "\1\27\1\30\1\12\1\31\2\12\1\32\1\33\3\12"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\12\1\45\1\46\1\47\1\50\1\12\1\51"+
    "\1\52\1\53\1\54\1\12\1\55\1\56\4\12\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\2\0\1\3\2\4"+
    "\2\65\1\0\2\65\2\0\1\66\17\0\2\65\1\0"+
    "\1\65\21\0\1\67\4\0\1\70\2\0\1\71\7\0"+
    "\1\65\3\0\1\63\1\0\1\72\2\0\1\4\217\0"+
    "\2\11\1\73\2\65\2\0\1\11\16\0\1\74\2\65"+
    "\1\0\1\65\41\0\1\65\12\0\2\65\1\73\2\65"+
    "\2\0\1\65\15\0\1\75\1\0\2\65\1\0\1\65"+
    "\41\0\1\65\12\0\2\65\1\73\2\65\2\0\1\65"+
    "\1\0\1\76\15\0\2\65\1\0\1\65\41\0\1\65"+
    "\12\0\2\65\1\73\2\65\2\0\1\65\17\0\2\65"+
    "\1\0\1\65\41\0\1\65\17\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\41\12\15\0\1\73\111\0\2\12"+
    "\1\0\1\12\1\77\6\12\1\100\2\12\1\101\3\12"+
    "\2\0\1\102\1\0\1\12\1\103\2\12\1\104\1\105"+
    "\12\12\1\106\3\12\1\107\5\12\1\110\6\12\20\0"+
    "\2\12\1\0\4\12\1\111\12\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\10\12\1\112\6\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\5\12\1\113"+
    "\11\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\3\12\1\114\13\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\1\12\1\115\2\12\1\116\1\117\5\12"+
    "\1\120\3\12\2\0\1\12\1\0\1\12\1\121\1\122"+
    "\7\12\1\123\4\12\1\124\21\12\20\0\2\12\1\0"+
    "\2\12\1\125\1\12\1\126\3\12\1\127\2\12\1\130"+
    "\3\12\2\0\1\12\1\0\1\12\1\131\2\12\1\132"+
    "\12\12\1\133\1\134\3\12\1\135\2\12\1\136\1\12"+
    "\1\137\7\12\20\0\2\12\1\0\2\12\1\140\1\141"+
    "\2\12\1\142\1\12\1\143\1\144\5\12\2\0\1\145"+
    "\1\0\1\12\1\146\22\12\1\147\1\150\10\12\1\151"+
    "\2\12\20\0\2\12\1\0\1\152\14\12\1\153\1\12"+
    "\2\0\1\12\1\0\4\12\1\154\30\12\1\155\1\12"+
    "\1\156\1\12\20\0\2\12\1\0\17\12\2\0\1\157"+
    "\1\0\41\12\13\0\2\65\1\73\2\65\2\0\1\65"+
    "\3\0\1\160\3\0\1\161\7\0\2\65\1\0\1\65"+
    "\41\0\1\65\12\0\2\65\1\73\2\65\2\0\1\65"+
    "\1\0\1\162\15\0\2\65\1\0\1\65\41\0\1\65"+
    "\12\0\2\65\1\73\2\65\2\0\1\65\1\0\1\163"+
    "\15\0\2\65\1\0\1\65\41\0\1\65\17\0\2\12"+
    "\1\0\16\12\1\164\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\165\1\0\4\12\1\166"+
    "\17\12\1\167\14\12\20\0\2\12\1\0\2\12\1\170"+
    "\1\12\1\171\12\12\2\0\1\12\1\0\24\12\1\172"+
    "\14\12\20\0\2\12\1\0\2\12\1\173\1\12\1\174"+
    "\3\12\1\175\6\12\2\0\1\12\1\0\4\12\1\176"+
    "\2\12\1\177\31\12\20\0\2\12\1\0\2\12\1\200"+
    "\14\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\4\12\1\201\12\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\11\12\1\202\5\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\3\12\1\203\1\204\3\12"+
    "\1\205\1\206\5\12\2\0\1\12\1\0\1\12\1\207"+
    "\37\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\25\12\1\210\13\12\20\0\2\12\1\0\15\12\1\211"+
    "\1\12\2\0\1\12\1\0\4\12\1\212\24\12\1\213"+
    "\7\12\20\0\2\12\1\0\2\12\1\214\1\215\1\216"+
    "\1\12\1\217\2\12\1\220\5\12\2\0\1\12\1\0"+
    "\1\12\1\221\2\12\1\222\2\12\1\223\31\12\20\0"+
    "\2\12\1\0\1\224\15\12\1\225\2\0\1\12\1\0"+
    "\4\12\1\226\22\12\1\227\2\12\1\230\5\12\1\231"+
    "\20\0\2\12\1\0\4\12\1\232\3\12\1\233\3\12"+
    "\1\234\2\12\2\0\1\12\1\0\1\12\1\235\37\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\1\12"+
    "\1\236\37\12\20\0\2\12\1\0\4\12\1\237\12\12"+
    "\2\0\1\12\1\0\21\12\1\240\17\12\20\0\2\12"+
    "\1\0\2\12\1\241\6\12\1\242\5\12\2\0\1\12"+
    "\1\0\16\12\1\243\22\12\20\0\2\12\1\0\11\12"+
    "\1\244\5\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\4\12\1\245\12\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\2\12\1\246\1\12\1\247\12\12"+
    "\2\0\1\12\1\0\41\12\13\0\2\65\1\73\2\65"+
    "\2\0\1\65\17\0\2\65\1\0\1\250\41\0\1\65"+
    "\12\0\2\65\1\0\2\65\2\0\1\65\17\0\2\65"+
    "\1\0\1\65\41\0\1\65\12\0\2\251\1\0\1\251"+
    "\3\0\1\251\17\0\2\251\67\0\1\252\117\0\1\253"+
    "\115\0\1\254\62\0\2\12\1\0\2\12\1\255\5\12"+
    "\1\256\6\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\5\12\1\257\33\12"+
    "\20\0\2\12\1\0\14\12\1\260\2\12\2\0\1\12"+
    "\1\0\7\12\1\261\31\12\20\0\2\12\1\0\4\12"+
    "\1\262\12\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\12\12\1\263\26\12"+
    "\20\0\2\12\1\0\2\12\1\264\14\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\3\12\1\265\13\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\10\12\1\266\30\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\17\12\1\267\21\12"+
    "\20\0\2\12\1\0\11\12\1\270\5\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\12\12\1\271\26\12\20\0\2\12\1\0\4\12"+
    "\1\272\12\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\273\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\12\12\1\274\26\12"+
    "\20\0\2\12\1\0\5\12\1\275\11\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\1\12\1\276\15\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\10\12"+
    "\1\277\6\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\12\12\1\300\26\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\17\12"+
    "\1\301\21\12\20\0\2\12\1\0\1\12\1\302\14\12"+
    "\1\303\2\0\1\12\1\0\4\12\1\304\34\12\20\0"+
    "\2\12\1\0\16\12\1\305\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\3\12\1\306\13\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\1\307\16\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\1\12\1\310"+
    "\13\12\1\311\1\12\2\0\1\12\1\0\4\12\1\312"+
    "\34\12\20\0\2\12\1\0\2\12\1\313\14\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\31\12\1\314\7\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\17\12\1\315\21\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\1\12\1\316"+
    "\4\12\1\317\32\12\20\0\2\12\1\0\2\12\1\320"+
    "\14\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\2\12\1\321\14\12\2\0\1\12\1\0\5\12\1\322"+
    "\33\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\1\323\11\12\1\324\26\12\20\0\2\12\1\0\3\12"+
    "\1\325\13\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\3\12\1\326\13\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\17\12"+
    "\1\327\21\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\12\12\1\330\26\12\20\0\2\12\1\0\7\12"+
    "\1\331\7\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\13\12\1\332\3\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\12\12\1\333\4\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\15\12\1\334\23\12\20\0\2\12\1\0\10\12"+
    "\1\335\6\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\5\12\1\336\33\12"+
    "\20\0\2\12\1\0\4\12\1\337\12\12\2\0\1\12"+
    "\1\0\41\12\35\0\1\340\107\0\1\341\114\0\1\342"+
    "\106\0\1\343\62\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\24\12\1\344\14\12\20\0\2\12\1\0\2\12"+
    "\1\345\14\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\4\12\1\346\3\12\1\347\6\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\7\12\1\350\7\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\351\1\12\2\0\1\12\1\0\25\12\1\352\13\12"+
    "\20\0\2\12\1\0\4\12\1\353\11\12\1\354\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\10\12\1\355\30\12\20\0\2\12\1\0"+
    "\12\12\1\356\2\12\1\357\1\360\2\0\1\12\1\0"+
    "\4\12\1\361\1\362\33\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\1\12\1\363\37\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\4\12\1\364\34\12"+
    "\20\0\2\12\1\0\4\12\1\365\12\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\6\12\1\366\10\12"+
    "\2\0\1\12\1\0\30\12\1\367\10\12\20\0\2\12"+
    "\1\0\11\12\1\370\5\12\2\0\1\12\1\0\1\371"+
    "\40\12\20\0\2\12\1\0\16\12\1\372\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\4\12\1\373\12\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\11\12"+
    "\1\374\5\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\1\12\1\375\37\12"+
    "\20\0\2\12\1\0\5\12\1\376\11\12\2\0\1\12"+
    "\1\0\4\12\1\377\34\12\20\0\2\12\1\0\16\12"+
    "\1\u0100\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\15\12\1\u0101\1\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\16\12\1\u0102\2\0\1\12\1\0\15\12"+
    "\1\u0103\23\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\4\12\1\u0104\34\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\24\12\1\u0105\14\12\20\0\2\12"+
    "\1\0\12\12\1\u0106\4\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\4\12\1\272\3\12\1\u0107\6\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\1\12\1\u0108\37\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\20\12\1\u0109\1\12"+
    "\1\u010a\16\12\20\0\2\12\1\0\3\12\1\u010b\11\12"+
    "\1\u010c\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\4\12\1\u010d\34\12"+
    "\20\0\2\12\1\0\2\12\1\u010e\1\12\1\u010f\12\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\21\12\1\u0110\17\12\20\0\2\12"+
    "\1\0\13\12\1\u0111\3\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\16\12\1\u0112\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\1\12\1\u0113\15\12\2\0"+
    "\1\12\1\0\4\12\1\u0114\34\12\20\0\2\12\1\0"+
    "\2\12\1\u0115\14\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\21\12\1\u0116"+
    "\17\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\4\12\1\u0117\34\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\2\12\1\u0118\6\12\1\u0119\1\u011a\2\12"+
    "\1\u011b\23\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\10\12\1\u011c\30\12\20\0\2\12\1\0\15\12"+
    "\1\u011d\1\12\2\0\1\12\1\0\4\12\1\u011e\34\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\1\u011f"+
    "\40\12\20\0\2\12\1\0\4\12\1\u0120\12\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\31\12\1\u0121\7\12\20\0\2\12\1\0"+
    "\12\12\1\u0122\4\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\16\12\1\u0123\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\1\u0124\16\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\5\12\1\u0125\33\12\20\0\2\12\1\0\15\12\1\u0126"+
    "\1\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\1\371\40\12\20\0\2\12"+
    "\1\0\2\12\1\u0127\14\12\2\0\1\12\1\0\41\12"+
    "\13\0\2\65\1\0\2\65\2\0\1\65\10\0\1\u0128"+
    "\3\0\1\u0129\2\0\2\65\1\0\1\65\41\0\1\65"+
    "\12\0\2\u012a\1\0\2\u012a\2\0\1\u012a\17\0\2\u012a"+
    "\1\0\1\u012a\41\0\1\u012a\17\0\2\12\1\0\3\12"+
    "\1\u012b\13\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\2\12\1\u012c\14\12\2\0\1\12\1\0\12\12"+
    "\1\u012d\26\12\20\0\2\12\1\0\4\12\1\u012e\12\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\21\12\1\u012f\17\12\20\0\2\12"+
    "\1\0\1\12\1\u0130\1\12\1\u0131\1\u0132\12\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\12\12\1\u0133\26\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\1\u0134\40\12\20\0\2\12"+
    "\1\0\10\12\1\u0135\6\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\6\12\1\u0136\10\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\15\12\1\u0137\1\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\4\12\1\u0138\34\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\1\u0139\40\12\20\0"+
    "\2\12\1\0\10\12\1\u013a\6\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\10\12\1\u013b\1\u013c\5\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\3\12"+
    "\1\u013d\13\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\4\12\1\u013e\12\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\24\12"+
    "\1\u013f\14\12\20\0\2\12\1\0\17\12\2\0\1\u0140"+
    "\1\0\41\12\20\0\2\12\1\0\16\12\1\u0141\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\1\u0142\40\12\20\0\2\12\1\0\16\12"+
    "\1\u0143\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\11\12\1\u0144\4\12\1\u0145\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\15\12"+
    "\1\u0146\23\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\5\12\1\u0147\33\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\4\12\1\u0148\34\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\25\12\1\u0149\13\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\3\12"+
    "\1\u014a\35\12\20\0\2\12\1\0\6\12\1\u014b\10\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u014c\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\10\12\1\u014d\6\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\2\12"+
    "\1\u014e\36\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\1\u014f\40\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\u0150\1\0\41\12\20\0\2\12\1\0\10\12\1\u0151"+
    "\6\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\4\12\1\u0152\12\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\15\12\1\u0153\1\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\4\12\1\u0154\1\12\1\u0155"+
    "\10\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\10\12\1\u0156\6\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\14\12\1\u0156\2\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\4\12\1\u0157\12\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\5\12\1\u0158\33\12\20\0\2\12\1\0"+
    "\10\12\1\u0159\6\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\1\12\1\u0130\15\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\3\12\1\u015a\13\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\5\12\1\u015b\33\12\20\0\2\12\1\0"+
    "\2\12\1\u015c\14\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\24\12\1\u015d"+
    "\14\12\20\0\2\12\1\0\10\12\1\u015e\6\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\1\12\1\u015f\37\12\20\0\2\12\1\0"+
    "\16\12\1\u0160\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\1\12\1\u0161\15\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\24\12"+
    "\1\u0162\14\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\6\12\1\u0163\32\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\6\12\1\u0164\32\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\4\12\1\u0165\34\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\6\12"+
    "\1\u0166\32\12\20\0\2\12\1\0\15\12\1\u0167\1\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\4\12"+
    "\1\u0168\12\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\5\12\1\u0169\33\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\3\12"+
    "\1\u016a\35\12\20\0\2\12\1\0\15\12\1\u016b\1\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\10\12"+
    "\1\u016c\6\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\16\12\1\u016d\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\4\12\1\u016e"+
    "\34\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\2\12\1\u016f\12\12\1\u0170\23\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\15\12\1\u0171\23\12\20\0"+
    "\2\12\1\0\10\12\1\u0172\6\12\2\0\1\12\1\0"+
    "\24\12\1\u0173\14\12\20\0\2\12\1\0\2\12\1\u0174"+
    "\14\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\5\12\1\u0175\33\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\6\12\1\u0176"+
    "\32\12\20\0\2\12\1\0\1\12\1\u0177\15\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\4\12\1\u0178"+
    "\12\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\10\12\1\u0179\6\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\17\12\1\u017a"+
    "\21\12\20\0\2\12\1\0\10\12\1\u017b\6\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\10\12\1\u017c"+
    "\6\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\4\12\1\u017d\34\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\7\12\1\u017d"+
    "\31\12\20\0\2\12\1\0\16\12\1\u017e\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\11\12\1\u017f\27\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\4\12\1\u0180\34\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\11\12\1\u0181\27\12"+
    "\20\0\2\12\1\0\2\12\1\u0182\14\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\33\12\1\u0183\5\12\20\0\2\12\1\0\11\12"+
    "\1\u0184\5\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\10\12\1\u0185\6\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\10\12\1\u0186\6\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\25\12\1\u0187\13\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\36\12\1\u0188\2\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\4\12\1\u0189\34\12"+
    "\20\0\2\12\1\0\10\12\1\u018a\6\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\1\12\1\u018b\22\12\1\u018c\14\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\4\12\1\u018d\34\12"+
    "\20\0\2\12\1\0\4\12\1\u018e\12\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\6\12\1\u018f\10\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u0190\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\11\12\1\u0191\5\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\12\12"+
    "\1\u0192\26\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\6\12\1\u0193\32\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\33\12\1\u0194\5\12\20\0\2\12"+
    "\1\0\10\12\1\u0195\6\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\16\12\1\u0196\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\1\u0197\16\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\6\12\1\u0198\32\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\34\12\1\u0199\4\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\4\12\1\u019a\34\12"+
    "\26\0\1\u019b\150\0\1\u019c\36\0\2\12\1\0\1\12"+
    "\1\u019d\15\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\4\12\1\u019e\34\12"+
    "\20\0\2\12\1\0\15\12\1\u019f\1\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\7\12\1\u019e\31\12\20\0\2\12\1\0\1\12"+
    "\1\u01a0\15\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\1\12\1\u01a1\15\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\4\12\1\u01a2\12\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\10\12\1\u01a3\6\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\20\12\1\u01a4\20\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\11\12\1\u01a5\27\12"+
    "\20\0\2\12\1\0\2\12\1\u01a6\14\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\3\12\1\u01a7\13\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u01a8\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\5\12\1\u01a9\33\12"+
    "\20\0\2\12\1\0\1\12\1\u01aa\15\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\16\12\1\u01ab\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\17\12\1\u01ac\21\12\20\0\2\12\1\0"+
    "\11\12\1\u01ad\5\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\4\12\1\u01ae\12\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\4\12\1\u01af\12\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\2\12\1\u01b0"+
    "\14\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\u01b1\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\1\12\1\u01b2\37\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\26\12\1\u01b3"+
    "\12\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\20\12\1\u01b4\20\12\20\0\2\12\1\0\1\12\1\u01b5"+
    "\15\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\10\12\1\u01b6\6\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\15\12\1\u01b7\1\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\4\12\1\u01b8\12\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\32\12\1\u01b9\6\12\20\0\2\12\1\0"+
    "\2\12\1\u01ba\1\12\1\u01bb\12\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\1\12\1\u01bc\37\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\20\12\1\u01bd\20\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\32\12\1\u01be\6\12\20\0"+
    "\2\12\1\0\1\12\1\u01bf\15\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\16\12\1\u01c0\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\11\12\1\u01c1\27\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\6\12\1\u01c2\32\12\20\0\2\12"+
    "\1\0\3\12\1\u01c3\13\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\17\12"+
    "\1\u01c4\21\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\12\12\1\u01c5\26\12\20\0\2\12\1\0\10\12"+
    "\1\u01c6\6\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\17\12\1\u01c7\21\12"+
    "\20\0\2\12\1\0\10\12\1\u01c8\6\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\5\12\1\u01c9\33\12\20\0\2\12\1\0\12\12"+
    "\1\u01ca\4\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\32\12\1\u01cb\6\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\6\12"+
    "\1\u01cc\32\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\30\12\1\u01cc\10\12\20\0\2\12\1\0\16\12"+
    "\1\u01cd\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\10\12\1\u01ce\6\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\2\12\1\u01cf\14\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\11\12\1\u01d0\5\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\15\12\1\u01d1\23\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\4\12\1\u01d2\34\12\20\0"+
    "\2\12\1\0\15\12\1\u01d3\1\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\25\12\1\u01d4\13\12\20\0\2\12\1\0\4\12\1\u01d5"+
    "\12\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\2\12\1\u01d6\14\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\1\12\1\u01d7"+
    "\37\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\11\12\1\u01d8\27\12\20\0\2\12\1\0\6\12\1\u01d9"+
    "\10\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\2\12\1\u01da\14\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\1\12\1\u01db\15\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\10\12\1\u01dc\6\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\3\12\1\u01dd"+
    "\13\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\1\12\1\u01de\15\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\22\12\1\u01df"+
    "\16\12\20\0\2\12\1\0\16\12\1\u01e0\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\3\12\1\u01e1\13\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\25\12\1\u01e2\13\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\24\12\1\u01e3\14\12"+
    "\20\0\2\12\1\0\3\12\1\u01e4\13\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\4\12\1\u01e5\34\12\20\0\2\12\1\0\2\12"+
    "\1\u01e6\14\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\1\12\1\u01e7\37\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\20\12"+
    "\1\u01e8\20\12\20\0\2\12\1\0\11\12\1\u01e9\5\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u01ea\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\10\12\1\u01eb\6\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\16\12"+
    "\1\u01ec\22\12\20\0\2\12\1\0\10\12\1\u01ed\6\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\10\12"+
    "\1\u01ee\6\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\20\12\1\u01ef\20\12"+
    "\20\0\2\12\1\0\1\12\1\u01f0\15\12\2\0\1\12"+
    "\1\0\41\12\41\0\1\u01f1\70\0\1\u01f1\103\0\2\12"+
    "\1\0\12\12\1\u01f2\4\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\11\12\1\u01f3\5\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\3\12\1\u01f4\13\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u01f5\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\7\12\1\u01f6\31\12"+
    "\20\0\2\12\1\0\11\12\1\u01f7\5\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\5\12\1\u01f8\33\12\20\0\2\12\1\0\16\12"+
    "\1\u01f9\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\11\12\1\u01fa\5\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\1\12\1\u01fb"+
    "\37\12\20\0\2\12\1\0\11\12\1\u01fc\5\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\4\12\1\u01fd"+
    "\1\12\1\u01fe\10\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\15\12\1\u01ff\1\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\12\12\1\u0200\4\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\15\12\1\u0201"+
    "\1\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\5\12\1\u0202\33\12\20\0"+
    "\2\12\1\0\10\12\1\u0203\6\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\12\12\1\u0204\26\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\24\12\1\u0205\14\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\7\12\1\u0206\31\12\20\0"+
    "\2\12\1\0\11\12\1\u0207\5\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\4\12\1\u0208\34\12\20\0\2\12\1\0\11\12\1\u0209"+
    "\5\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\1\12\1\u020a\37\12\20\0"+
    "\2\12\1\0\3\12\1\u020b\13\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\2\12\1\u020c\36\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\4\12\1\u020d\34\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\7\12\1\u020d\31\12\20\0"+
    "\2\12\1\0\16\12\1\u020e\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\11\12\1\u020f\5\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\16\12\1\u0210\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\10\12\1\u0211"+
    "\6\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\6\12\1\u0212\10\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\6\12\1\u0213\10\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\1\12\1\u0214\15\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\4\12\1\u0215"+
    "\12\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\16\12\1\u0216\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\16\12\1\u0217\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\1\12\1\u0218\15\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\15\12\1\u0219\1\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\4\12\1\u021a\34\12\20\0\2\12\1\0"+
    "\10\12\1\u021b\6\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\16\12\1\u021c\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\15\12\1\u021d\1\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\15\12\1\u021e\1\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u021f\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\2\12\1\u0220\14\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\20\12"+
    "\1\u0221\20\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\32\12\1\u0222\6\12\20\0\2\12\1\0\3\12"+
    "\1\u0223\13\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\2\12\1\u0224\14\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\11\12\1\u0225\5\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\21\12\1\u0226\17\12\20\0\2\12\1\0\1\12"+
    "\1\u0227\15\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\5\12\1\u0228\33\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\17\12"+
    "\1\u0229\21\12\20\0\2\12\1\0\16\12\1\u022a\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\2\12\1\u022b"+
    "\14\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\25\12\1\u022c\13\12\20\0"+
    "\2\12\1\0\15\12\1\u022d\1\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\31\12\1\u022e\7\12\20\0\2\12\1\0\15\12\1\u022f"+
    "\1\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\11\12\1\u0230\27\12\20\0"+
    "\2\12\1\0\3\12\1\u0231\13\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\31\12\1\u0232\7\12\20\0\2\12\1\0\12\12\1\u0233"+
    "\4\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\12\12\1\u0234\4\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\15\12\1\u0235\1\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\10\12\1\u0236\6\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\15\12\1\u0237"+
    "\1\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\1\12\1\u0238\15\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\15\12\1\u0239\1\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\10\12\1\u023a\6\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\11\12\1\u023b"+
    "\5\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\2\12\1\u023c\14\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\3\12\1\u023d\13\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\1\12\1\u023e\15\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\1\12\1\u023f\37\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\20\12\1\u0240\20\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\11\12\1\u0241"+
    "\27\12\20\0\2\12\1\0\2\12\1\u0242\14\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\6\12\1\u0243\32\12\20\0\2\12\1\0"+
    "\12\12\1\u0244\4\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\17\12\1\u0245"+
    "\21\12\20\0\2\12\1\0\15\12\1\u0246\1\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\11\12\1\u0247"+
    "\5\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\5\12\1\u0248\33\12\20\0"+
    "\2\12\1\0\1\12\1\u0249\15\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\4\12\1\u024a\12\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\10\12\1\u024b"+
    "\6\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\4\12\1\u024c\12\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\20\12\1\u024d"+
    "\20\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\20\12\1\u024e\20\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\1\12\1\u024f\37\12\20\0\2\12\1\0"+
    "\16\12\1\u0250\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\11\12\1\u0251\5\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\11\12"+
    "\1\u0252\27\12\20\0\2\12\1\0\10\12\1\u0253\6\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\10\12"+
    "\1\u0254\1\u0255\5\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\1\12\1\u0256\15\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\1\12\1\u0257\15\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\12\12\1\u0258"+
    "\4\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\4\12\1\u0259\34\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\7\12\1\u025a"+
    "\31\12\20\0\2\12\1\0\2\12\1\u025b\14\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\15\12\1\u025c"+
    "\1\12\2\0\1\12\1\0\41\12\20\0\2\12\1\0"+
    "\15\12\1\u025d\1\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\31\12\1\u025e"+
    "\7\12\20\0\2\12\1\0\2\12\1\u025f\14\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\22\12\1\u0260\16\12\20\0\2\12\1\0"+
    "\10\12\1\u0261\6\12\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\3\12\1\u0262\13\12\2\0\1\12\1\0"+
    "\41\12\20\0\2\12\1\0\12\12\1\u0263\4\12\2\0"+
    "\1\12\1\0\41\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\14\12\1\u0263\24\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\11\12\1\u0264\27\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\33\12\1\u0265"+
    "\5\12\20\0\2\12\1\0\16\12\1\u0266\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\15\12\1\u0267\1\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\11\12\1\u0268\27\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\11\12\1\u0269\27\12"+
    "\20\0\2\12\1\0\12\12\1\u026a\4\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\2\12\1\u026b\36\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\4\12\1\u026c\34\12\20\0\2\12"+
    "\1\0\15\12\1\u026d\1\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\10\12\1\u026e\6\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\4\12\1\u026f\34\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\7\12\1\u026f\31\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\4\12\1\u0270\34\12"+
    "\20\0\2\12\1\0\6\12\1\u0271\10\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\11\12\1\u0272\27\12\20\0\2\12\1\0\15\12"+
    "\1\u0273\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\2\12\1\u0274\14\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\1\12"+
    "\1\u0275\37\12\20\0\2\12\1\0\3\12\1\u0276\13\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u0277\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\7\12\1\u0278\31\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\7\12"+
    "\1\u0279\31\12\20\0\2\12\1\0\3\12\1\u027a\13\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\11\12"+
    "\1\u027b\5\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\4\12\1\u027c\12\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\2\12"+
    "\1\u027d\36\12\20\0\2\12\1\0\11\12\1\u027e\5\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\25\12\1\u027f\13\12\20\0\2\12"+
    "\1\0\1\12\1\u0280\15\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\11\12"+
    "\1\u0281\27\12\20\0\2\12\1\0\13\12\1\u0282\3\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\1\12"+
    "\1\u0283\15\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\6\12\1\u0284\10\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\24\12"+
    "\1\u0285\14\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\12\12\1\u0286\26\12\20\0\2\12\1\0\12\12"+
    "\1\u0287\4\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\10\12\1\u0288\6\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\20\12"+
    "\1\u0289\20\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\11\12\1\u028a\27\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\4\12\1\u028b\34\12\20\0\2\12"+
    "\1\0\15\12\1\u028c\1\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\1\12\1\u028d\15\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\4\12\1\u028e\12\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u028f\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\10\12\1\u0290\6\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\15\12\1\u0291\1\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\24\12\1\u0292\14\12\20\0\2\12\1\0\11\12"+
    "\1\u0293\5\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\27\12\1\u0294\11\12"+
    "\20\0\2\12\1\0\13\12\1\u0295\3\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\4\12\1\u0296\12\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\11\12"+
    "\1\u0297\5\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\7\12\1\u0298\31\12"+
    "\20\0\2\12\1\0\12\12\1\u0299\4\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\15\12\1\u029a\1\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\1\12\1\u029b\37\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\17\12\1\u029c\21\12"+
    "\20\0\2\12\1\0\4\12\1\u029d\12\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\24\12\1\u029e\14\12\20\0\2\12\1\0\14\12"+
    "\1\u029f\2\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\3\12\1\u02a0\13\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\15\12\1\u02a1\1\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\10\12\1\u02a2\6\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\6\12"+
    "\1\u02a3\10\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\15\12\1\u02a4\1\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\7\12\1\u02a5\7\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\3\12\1\u02a6\35\12\20\0\2\12\1\0\1\12"+
    "\1\u02a7\15\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\11\12\1\u02a8\27\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\20\12"+
    "\1\u02a9\20\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\7\12\1\u02aa\31\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\26\12\1\u02ab\12\12\20\0\2\12"+
    "\1\0\16\12\1\u02ac\2\0\1\12\1\0\41\12\20\0"+
    "\2\12\1\0\17\12\2\0\1\12\1\0\7\12\1\u02ad"+
    "\31\12\20\0\2\12\1\0\17\12\2\0\1\12\1\0"+
    "\21\12\1\u02ae\17\12\20\0\2\12\1\0\17\12\2\0"+
    "\1\12\1\0\24\12\1\u02af\14\12\20\0\2\12\1\0"+
    "\17\12\2\0\1\12\1\0\1\u02b0\40\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\24\12\1\u02b1\14\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\36\12"+
    "\1\u02b2\2\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\17\12\1\u02b3\21\12\20\0\2\12\1\0\2\12"+
    "\1\u02b4\14\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\13\12\1\u02b5\3\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\24\12"+
    "\1\u02b6\14\12\20\0\2\12\1\0\6\12\1\u02b7\10\12"+
    "\2\0\1\12\1\0\41\12\20\0\2\12\1\0\15\12"+
    "\1\u02b8\1\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\17\12\2\0\1\12\1\0\36\12\1\u02b9\2\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\17\12"+
    "\1\u02ba\21\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\20\12\1\u02bb\20\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\4\12\1\u02bc\34\12\20\0\2\12"+
    "\1\0\7\12\1\u02bd\7\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\6\12\1\u02be\10\12\2\0\1\12"+
    "\1\0\41\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\7\12\1\u02bf\31\12\20\0\2\12\1\0\11\12"+
    "\1\u02c0\5\12\2\0\1\12\1\0\41\12\20\0\2\12"+
    "\1\0\14\12\1\u02c1\2\12\2\0\1\12\1\0\41\12"+
    "\20\0\2\12\1\0\17\12\2\0\1\12\1\0\20\12"+
    "\1\u02c2\20\12\20\0\2\12\1\0\17\12\2\0\1\12"+
    "\1\0\6\12\1\u02c3\32\12\20\0\2\12\1\0\17\12"+
    "\2\0\1\12\1\0\7\12\1\u02c4\31\12\20\0\2\12"+
    "\1\0\10\12\1\u02c5\6\12\2\0\1\12\1\0\41\12"+
    "\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39334];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\2\1\1\11\3\1\1\11\34\1"+
    "\1\11\5\1\1\11\1\1\5\11\1\1\5\11\4\0"+
    "\61\1\4\0\65\1\1\0\3\11\63\1\4\11\104\1"+
    "\2\0\1\11\160\1\2\0\124\1\1\11\324\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[709];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return symbol(sym.BAD_LITERAL);
          }
        case 165: break;
        case 118: 
          { return symbol(sym.PALMING_LITERAL);
          }
        case 166: break;
        case 135: 
          { return symbol(sym.REPLACED_LITERAL);
          }
        case 167: break;
        case 73: 
          { return symbol(sym.FREE_LITERAL);
          }
        case 168: break;
        case 35: 
          { return symbol(sym.SUBSTITUTION);
          }
        case 169: break;
        case 96: 
          { return symbol(sym.ALLEY_LITERAL);
          }
        case 170: break;
        case 17: 
          { return symbol(sym.NEUTRAL);
          }
        case 171: break;
        case 122: 
          { return symbol(sym.DRIVING_LITERAL);
          }
        case 172: break;
        case 144: 
          { return symbol(sym.CP_FOUL);
          }
        case 173: break;
        case 105: 
          { return symbol(sym.EXCESS_LITERAL);
          }
        case 174: break;
        case 106: 
          { return symbol(sym.CHARGE_LITERAL);
          }
        case 175: break;
        case 65: 
          { return symbol(sym.LANE_LITERAL);
          }
        case 176: break;
        case 74: 
          { return symbol(sym.FOUL_LITERAL);
          }
        case 177: break;
        case 84: 
          { return symbol(sym.SHORT_LITERAL);
          }
        case 178: break;
        case 155: 
          { return symbol(sym.PUNCH_FOUL);
          }
        case 179: break;
        case 60: 
          { return symbol(sym.POSS_LITERAL);
          }
        case 180: break;
        case 9: 
          { return symbol(sym.DASH);
          }
        case 181: break;
        case 152: 
          { return symbol(sym.BACKCOURT_LITERAL);
          }
        case 182: break;
        case 110: 
          { return symbol(sym.FINGER_LITERAL);
          }
        case 183: break;
        case 24: 
          { return symbol(sym.PENALTY);
          }
        case 184: break;
        case 156: 
          { return symbol(sym.TURNAROUND_LITERAL);
          }
        case 185: break;
        case 127: 
          { return symbol(sym.ILLEGAL_LITERAL);
          }
        case 186: break;
        case 119: 
          { return symbol(sym.PUTBACK_LITERAL);
          }
        case 187: break;
        case 37: 
          { return symbol(sym.OFF_LITERAL);
          }
        case 188: break;
        case 51: 
          { return symbol(sym.ASSIST);
          }
        case 189: break;
        case 10: 
          { yybegin(PLAYINFO); return symbol(sym.LEFT_CURLY);
          }
        case 190: break;
        case 54: 
          { return symbol(sym.STEP_LITERAL);
          }
        case 191: break;
        case 42: 
          { return symbol(sym.END_LITERAL);
          }
        case 192: break;
        case 138: 
          { return symbol(sym.OPPOSITE_LITERAL);
          }
        case 193: break;
        case 91: 
          { return symbol(sym.BELOW_LITERAL);
          }
        case 194: break;
        case 67: 
          { return symbol(sym.BANK_LITERAL);
          }
        case 195: break;
        case 38: 
          { return symbol(sym.OUT_LITERAL);
          }
        case 196: break;
        case 16: 
          { return symbol(sym.HOME_TEAM);
          }
        case 197: break;
        case 71: 
          { return symbol(sym.DUNK_LITERAL);
          }
        case 198: break;
        case 163: 
          { return symbol(sym.AWAY_FROM_PLAY_FOUL);
          }
        case 199: break;
        case 45: 
          { return symbol(sym.FOURTH, yytext());
          }
        case 200: break;
        case 12: 
          { return symbol(sym.RIGHT_PAREN);
          }
        case 201: break;
        case 114: 
          { return symbol(sym.JUMPER_LITERAL);
          }
        case 202: break;
        case 151: 
          { return symbol(sym.TECHNICAL_LITERAL);
          }
        case 203: break;
        case 108: 
          { return symbol(sym.BOUNDS_LITERAL);
          }
        case 204: break;
        case 63: 
          { return symbol(sym.TEAM_LITERAL);
          }
        case 205: break;
        case 104: 
          { return symbol(sym.ELBOWS_LITERAL);
          }
        case 206: break;
        case 153: 
          { return symbol(sym.VIOLATION_LITERAL);
          }
        case 207: break;
        case 46: 
          { return symbol(sym.SIXTH, yytext());
          }
        case 208: break;
        case 107: 
          { return symbol(sym.BASKET_LITERAL);
          }
        case 209: break;
        case 160: 
          { return symbol(sym.GOALTENDING_LITERAL);
          }
        case 210: break;
        case 112: 
          { return symbol(sym.REPLAY_LITERAL);
          }
        case 211: break;
        case 20: 
          { return symbol(sym.OF_LITERAL);
          }
        case 212: break;
        case 100: 
          { return symbol(sym.PERIOD_LITERAL);
          }
        case 213: break;
        case 148: 
          { return symbol(sym.FLOATING_LITERAL);
          }
        case 214: break;
        case 131: 
          { return symbol(sym.REBOUND_LITERAL);
          }
        case 215: break;
        case 162: 
          { return symbol(sym.FLAGRANT_FOUL_TYPE);
          }
        case 216: break;
        case 146: 
          { return symbol(sym.FADEAWAY_LITERAL);
          }
        case 217: break;
        case 139: 
          { return symbol(sym.OFF_FOUL);
          }
        case 218: break;
        case 133: 
          { return symbol(sym.SHOOTING_LITERAL);
          }
        case 219: break;
        case 132: 
          { return symbol(sym.RUNNING_LITERAL);
          }
        case 220: break;
        case 75: 
          { return symbol(sym.FULL_LITERAL);
          }
        case 221: break;
        case 101: 
          { return symbol(sym.PULLUP_LITERAL);
          }
        case 222: break;
        case 44: 
          { return symbol(sym.THREEPT_LITERAL);
          }
        case 223: break;
        case 62: 
          { return symbol(sym.TAKE_LITERAL);
          }
        case 224: break;
        case 86: 
          { return symbol(sym.THROW_LITERAL);
          }
        case 225: break;
        case 123: 
          { return symbol(sym.DRIBBLE_LITERAL);
          }
        case 226: break;
        case 58: 
          { return symbol(sym.PATH_LITERAL);
          }
        case 227: break;
        case 4: 
          { return symbol(sym.PLAYER_NAME, yytext());
          }
        case 228: break;
        case 140: 
          { return symbol(sym.PERSONAL_LITERAL);
          }
        case 229: break;
        case 136: 
          { return symbol(sym.OFFICIAL_LITERAL);
          }
        case 230: break;
        case 92: 
          { return symbol(sym.BLOCK_LITERAL);
          }
        case 231: break;
        case 2: 
          { return symbol(sym.NUMBER, yytext());
          }
        case 232: break;
        case 39: 
          { return symbol(sym.POINTS);
          }
        case 233: break;
        case 76: 
          { return symbol(sym.AWAY_LITERAL);
          }
        case 234: break;
        case 94: 
          { return symbol(sym.DELAY_LITERAL);
          }
        case 235: break;
        case 128: 
          { return symbol(sym.IN_FOUL);
          }
        case 236: break;
        case 25: 
          { return symbol(sym.TURNOVER);
          }
        case 237: break;
        case 159: 
          { return symbol(sym.ALTERCATION_LITERAL);
          }
        case 238: break;
        case 28: 
          { return symbol(sym.AM);
          }
        case 239: break;
        case 66: 
          { return symbol(sym.LOST_LITERAL);
          }
        case 240: break;
        case 68: 
          { return symbol(sym.BALL_LITERAL);
          }
        case 241: break;
        case 88: 
          { return symbol(sym.CLEAR_LITERAL);
          }
        case 242: break;
        case 79: 
          { return symbol(sym.HOOK_LITERAL);
          }
        case 243: break;
        case 98: 
          { return symbol(sym.SCREEN_LITERAL);
          }
        case 244: break;
        case 85: 
          { return symbol(sym.OTHER_LITERAL);
          }
        case 245: break;
        case 95: 
          { return symbol(sym.FIRST_LITERAL);
          }
        case 246: break;
        case 157: 
          { return symbol(sym.POSSESSION_LITERAL);
          }
        case 247: break;
        case 36: 
          { return symbol(sym.OOP_LITERAL);
          }
        case 248: break;
        case 31: 
          { return symbol(sym.SECOND, yytext());
          }
        case 249: break;
        case 97: 
          { return symbol(sym.SECOND_LITERAL);
          }
        case 250: break;
        case 72: 
          { return symbol(sym.FADE_LITERAL);
          }
        case 251: break;
        case 117: 
          { return symbol(sym.SUPPORT_LITERAL);
          }
        case 252: break;
        case 93: 
          { return symbol(sym.GAINS_LITERAL);
          }
        case 253: break;
        case 6: 
          { return symbol(sym.P_LITERAL);
          }
        case 254: break;
        case 149: 
          { return symbol(sym.OFFENSIVE_LITERAL);
          }
        case 255: break;
        case 109: 
          { return symbol(sym.DOUBLE_LITERAL);
          }
        case 256: break;
        case 61: 
          { return symbol(sym.PLAY_LITERAL);
          }
        case 257: break;
        case 70: 
          { return symbol(sym.GAME_LITERAL);
          }
        case 258: break;
        case 80: 
          { return symbol(sym.MADE_LITERAL);
          }
        case 259: break;
        case 124: 
          { return symbol(sym.DEFENSE_LITERAL);
          }
        case 260: break;
        case 22: 
          { return symbol(sym.PERSONAL_FOUL);
          }
        case 261: break;
        case 52: 
          { return symbol(sym.REGULAR);
          }
        case 262: break;
        case 21: 
          { return symbol(sym.OVERTIME);
          }
        case 263: break;
        case 41: 
          { return symbol(sym.EST);
          }
        case 264: break;
        case 29: 
          { return symbol(sym.NO_LITERAL);
          }
        case 265: break;
        case 27: 
          { return symbol(sym.BY_LITERAL);
          }
        case 266: break;
        case 15: 
          { return symbol(sym.AWAY_TEAM);
          }
        case 267: break;
        case 34: 
          { return symbol(sym.STEAL);
          }
        case 268: break;
        case 64: 
          { return symbol(sym.TYPE_LITERAL);
          }
        case 269: break;
        case 40: 
          { return symbol(sym.TIP_LITERAL);
          }
        case 270: break;
        case 161: 
          { return symbol(sym.HANGING_TECH_FOUL);
          }
        case 271: break;
        case 57: 
          { return symbol(sym.FROM_LITERAL);
          }
        case 272: break;
        case 77: 
          { return symbol(sym.ROLL_LITERAL);
          }
        case 273: break;
        case 89: 
          { return symbol(sym.LAYUP_LITERAL);
          }
        case 274: break;
        case 13: 
          { return symbol(sym.COMMA);
          }
        case 275: break;
        case 11: 
          { return symbol(sym.LEFT_PAREN);
          }
        case 276: break;
        case 126: 
          { return symbol(sym.INBOUND_LITERAL);
          }
        case 277: break;
        case 116: 
          { return symbol(sym.KICKED_LITERAL);
          }
        case 278: break;
        case 130: 
          { return symbol(sym.REGULAR_LITERAL);
          }
        case 279: break;
        case 99: 
          { return symbol(sym.S_FOUL);
          }
        case 280: break;
        case 14: 
          { return symbol(sym.POUND_SIGN);
          }
        case 281: break;
        case 33: 
          { return symbol(sym.SEC_LITERAL);
          }
        case 282: break;
        case 78: 
          { return symbol(sym.JUMP_LITERAL);
          }
        case 283: break;
        case 23: 
          { return symbol(sym.PM);
          }
        case 284: break;
        case 125: 
          { return symbol(sym.INSTANT_LITERAL);
          }
        case 285: break;
        case 87: 
          { return symbol(sym.CLOCK_LITERAL);
          }
        case 286: break;
        case 134: 
          { return symbol(sym.SWINGING_LITERAL);
          }
        case 287: break;
        case 3: 
          { return symbol(sym.COLON);
          }
        case 288: break;
        case 55: 
          { return symbol(sym.SHOT_LITERAL);
          }
        case 289: break;
        case 32: 
          { return symbol(sym.FIFTH, yytext());
          }
        case 290: break;
        case 129: 
          { return symbol(sym.REVERSE_LITERAL);
          }
        case 291: break;
        case 113: 
          { return symbol(sym.RULING_LITERAL);
          }
        case 292: break;
        case 145: 
          { return symbol(sym.LB_FOUL);
          }
        case 293: break;
        case 111: 
          { return symbol(sym.ASSIST_LITERAL);
          }
        case 294: break;
        case 141: 
          { return symbol(sym.TAUNTING_LITERAL);
          }
        case 295: break;
        case 154: 
          { return symbol(sym.DEFENSIVE_LITERAL);
          }
        case 296: break;
        case 158: 
          { return symbol(sym.DISCONTINUE_LITERAL);
          }
        case 297: break;
        case 142: 
          { return symbol(sym.TURNOVER_LITERAL);
          }
        case 298: break;
        case 59: 
          { return symbol(sym.PASS_LITERAL);
          }
        case 299: break;
        case 115: 
          { return symbol(sym.MISSED_LITERAL);
          }
        case 300: break;
        case 56: 
          { return symbol(sym.SLAM_LITERAL);
          }
        case 301: break;
        case 102: 
          { return symbol(sym.P_FOUL);
          }
        case 302: break;
        case 5: 
          { return symbol(sym.SINGLE_QUOTE);
          }
        case 303: break;
        case 69: 
          { return symbol(sym.BACK_LITERAL);
          }
        case 304: break;
        case 18: 
          { yybegin(YYINITIAL); return symbol(sym.RIGHT_CURLY);
          }
        case 305: break;
        case 83: 
          { return symbol(sym.STEAL_LITERAL);
          }
        case 306: break;
        case 50: 
          { return symbol(sym.FOR_LITERAL);
          }
        case 307: break;
        case 120: 
          { return symbol(sym.PUNCHED_LITERAL);
          }
        case 308: break;
        case 143: 
          { return symbol(sym.EJECTION_LITERAL);
          }
        case 309: break;
        case 7: 
          { return symbol(sym.T_LITERAL);
          }
        case 310: break;
        case 19: 
          { return symbol(sym.TO_LITERAL);
          }
        case 311: break;
        case 150: 
          { return symbol(sym.TRAVELING_LITERAL);
          }
        case 312: break;
        case 147: 
          { return symbol(sym.FLAGRANT_LITERAL);
          }
        case 313: break;
        case 8: 
          { return symbol(sym.PERIOD);
          }
        case 314: break;
        case 164: 
          { return symbol(sym.UNSPORTSMANLIKE);
          }
        case 315: break;
        case 81: 
          { return symbol(sym.MISS_LITERAL);
          }
        case 316: break;
        case 49: 
          { return symbol(sym.DEF);
          }
        case 317: break;
        case 43: 
          { return symbol(sym.THIRD, yytext());
          }
        case 318: break;
        case 103: 
          { return symbol(sym.T_FOUL);
          }
        case 319: break;
        case 26: 
          { return symbol(sym.VS_LITERAL);
          }
        case 320: break;
        case 53: 
          { return symbol(sym.TIME, yytext());
          }
        case 321: break;
        case 90: 
          { return symbol(sym.LOOSE_LITERAL);
          }
        case 322: break;
        case 82: 
          { return symbol(sym.START_LITERAL);
          }
        case 323: break;
        case 137: 
          { return symbol(sym.OVERTURN_LITERAL);
          }
        case 324: break;
        case 121: 
          { return symbol(sym.TIMEOUT_LITERAL);
          }
        case 325: break;
        case 30: 
          { return symbol(sym.FIRST, yytext());
          }
        case 326: break;
        case 48: 
          { return symbol(sym.BLOCK);
          }
        case 327: break;
        case 1: 
          { 
          }
        case 328: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          scanner = new Yylex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
