/* The following code was generated by JFlex 1.4.3 on 6/25/13 7:26 PM */

package scanner;

import java_cup.runtime.*;
import parser.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/25/13 7:26 PM from the specification file
 * <tt>PBP.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PLAYINFO = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\2\0\1\103"+
    "\3\0\1\76\1\100\1\101\2\0\1\102\1\71\1\75\1\0\1\11"+
    "\1\4\1\31\1\32\1\33\1\7\1\35\3\5\1\6\6\0\1\57"+
    "\1\46\1\41\1\52\1\26\1\55\1\70\1\63\1\54\1\61\1\65"+
    "\1\45\1\64\1\66\1\20\1\21\1\10\1\60\1\12\1\25\1\56"+
    "\1\51\2\10\1\73\1\10\6\0\1\14\1\53\1\43\1\24\1\22"+
    "\1\17\1\47\1\34\1\23\1\72\1\44\1\42\1\36\1\27\1\16"+
    "\1\50\1\10\1\15\1\30\1\13\1\37\1\40\1\67\1\74\1\62"+
    "\1\10\1\77\1\0\1\104\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\2\2\2\3\1\4\1\3\1\1\1\3"+
    "\1\5\5\1\1\6\1\7\2\1\4\3\1\1\1\10"+
    "\1\11\1\12\17\1\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\1\25\1\3"+
    "\3\0\11\1\1\26\1\1\1\27\3\1\1\27\1\30"+
    "\11\1\1\31\1\32\1\33\2\1\1\34\14\1\5\0"+
    "\1\35\21\1\1\36\15\1\1\37\13\1\1\40\2\1"+
    "\1\0\1\41\1\42\2\1\1\43\1\1\1\44\4\1"+
    "\1\45\4\1\1\46\1\47\1\50\1\1\1\47\5\1"+
    "\1\51\12\1\1\52\4\1\1\53\1\54\4\1\1\55"+
    "\1\56\1\57\1\60\1\61\7\1\1\62\10\1\1\63"+
    "\5\1\1\64\12\1\1\65\6\1\1\66\5\1\1\67"+
    "\16\1\1\0\2\1\1\70\2\1\1\71\3\1\1\72"+
    "\3\1\1\73\4\1\1\74\1\75\1\1\1\76\5\1"+
    "\1\77\1\1\1\100\1\1\1\101\4\1\1\102\6\1"+
    "\1\103\2\1\1\104\1\105\1\1\1\106\1\107\15\1"+
    "\1\110\3\1\1\111\1\112\1\113\2\1\1\114\5\1"+
    "\1\115\1\116\7\1\1\117\1\120\1\121\1\1\1\122"+
    "\2\1\1\123\1\1\1\124\1\125\1\126\1\1\1\127"+
    "\5\1\1\130\15\1\1\131\6\1\1\132\1\133\1\134"+
    "\1\135\3\1\1\136\1\137\1\140\6\1\1\141\5\1"+
    "\1\142\5\1\1\143\14\1\1\0\1\144\2\1\1\145"+
    "\6\1\1\146\3\1\1\147\6\1\1\150\1\1\1\151"+
    "\1\152\1\153\1\1\1\154\4\1\1\155\6\1\1\156"+
    "\3\1\1\157\2\1\1\160\3\1\1\161\1\162\1\163"+
    "\1\164\2\1\1\124\1\1\1\165\5\1\1\166\1\1"+
    "\1\167\1\170\3\1\1\171\6\1\1\172\1\173\1\174"+
    "\2\1\1\175\1\176\1\177\4\1\1\200\1\201\1\202"+
    "\1\203\2\1\1\204\1\205\1\206\1\1\1\207\1\210"+
    "\1\211\1\212\3\1\1\213\1\214\5\1\1\215\1\216"+
    "\1\217\2\1\1\220\1\221\1\222\1\1\1\223\1\1"+
    "\1\224\1\225\3\1\1\226\1\227\3\1\1\230\1\1"+
    "\1\231\7\1\1\232";

  private static int [] zzUnpackAction() {
    int [] result = new int[587];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\317\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816"+
    "\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e"+
    "\0\u0a83\0\u0ac8\0\u0b0d\0\u01e3\0\u01e3\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\317\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u01e3\0\u0ed3\0\u01e3\0\u0f18"+
    "\0\u0f5d\0\u0fa2\0\u0fe7\0\u01e3\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u01e3\0\u01e3\0\u01e3"+
    "\0\u1299\0\u12de\0\u01e3\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437"+
    "\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f"+
    "\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u01e3\0\u17b8\0\u17fd\0\u1842"+
    "\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a"+
    "\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u01e3\0\u1c4d"+
    "\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75"+
    "\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u01e3\0\u1fce\0\u2013\0\u2058"+
    "\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280"+
    "\0\u22c5\0\u230a\0\u234f\0\u2394\0\317\0\317\0\u23d9\0\u241e"+
    "\0\u2463\0\u24a8\0\u01e3\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u01e3"+
    "\0\u2601\0\u2646\0\u268b\0\u26d0\0\u01e3\0\u2715\0\u01e3\0\u275a"+
    "\0\u01e3\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u01e3\0\u28f8"+
    "\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20"+
    "\0\u2b65\0\u01e3\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u01e3\0\u01e3"+
    "\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\317\0\317\0\317\0\317"+
    "\0\317\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70"+
    "\0\u01e3\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153"+
    "\0\u3198\0\u01e3\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u01e3\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741"+
    "\0\u3786\0\u01e3\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924"+
    "\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c"+
    "\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74"+
    "\0\u3db9\0\u01e3\0\u3dfe\0\u3e43\0\u01e3\0\u3e88\0\u3ecd\0\u3f12"+
    "\0\u01e3\0\u3f57\0\u3f9c\0\u3fe1\0\u01e3\0\u4026\0\u406b\0\u40b0"+
    "\0\u40f5\0\u01e3\0\u01e3\0\u413a\0\u01e3\0\u417f\0\u41c4\0\u4209"+
    "\0\u424e\0\u4293\0\u01e3\0\u42d8\0\u01e3\0\u431d\0\u01e3\0\u4362"+
    "\0\u43a7\0\u43ec\0\u4431\0\u01e3\0\u4476\0\u44bb\0\u4500\0\u4545"+
    "\0\u458a\0\u45cf\0\u01e3\0\u4614\0\u4659\0\u01e3\0\u01e3\0\u469e"+
    "\0\u01e3\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881"+
    "\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u01e3"+
    "\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u01e3\0\u01e3\0\u4bbd\0\u4c02"+
    "\0\u01e3\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u01e3\0\u01e3"+
    "\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83"+
    "\0\u01e3\0\u01e3\0\u4fc8\0\u01e3\0\u500d\0\u5052\0\u01e3\0\u5097"+
    "\0\u50dc\0\u01e3\0\u01e3\0\u5121\0\u01e3\0\u5166\0\u51ab\0\u51f0"+
    "\0\u5235\0\u527a\0\u01e3\0\u52bf\0\u5304\0\u5349\0\u538e\0\u53d3"+
    "\0\u5418\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb"+
    "\0\u01e3\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u01e3"+
    "\0\u01e3\0\u01e3\0\u01e3\0\u57de\0\u5823\0\u5868\0\u01e3\0\u01e3"+
    "\0\u01e3\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06\0\u01e3"+
    "\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u01e3\0\u5ba4\0\u5be9"+
    "\0\u5c2e\0\u5c73\0\u5cb8\0\u01e3\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc"+
    "\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4"+
    "\0\u6039\0\u01e3\0\u607e\0\u60c3\0\u01e3\0\u6108\0\u614d\0\u6192"+
    "\0\u61d7\0\u621c\0\u6261\0\u01e3\0\u62a6\0\u62eb\0\u6330\0\u01e3"+
    "\0\u6375\0\u63ba\0\u63ff\0\u6444\0\u6489\0\u64ce\0\u01e3\0\u6513"+
    "\0\u01e3\0\u01e3\0\u01e3\0\u6558\0\u01e3\0\u659d\0\u65e2\0\u6627"+
    "\0\u666c\0\u01e3\0\u66b1\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u680a"+
    "\0\u01e3\0\u684f\0\u6894\0\u68d9\0\u01e3\0\u691e\0\u6963\0\u01e3"+
    "\0\u69a8\0\u69ed\0\u6a32\0\u01e3\0\u01e3\0\u01e3\0\u01e3\0\u6a77"+
    "\0\u6abc\0\317\0\u6b01\0\u01e3\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15"+
    "\0\u6c5a\0\u01e3\0\u6c9f\0\u01e3\0\u01e3\0\u6ce4\0\u6d29\0\u6d6e"+
    "\0\u01e3\0\u6db3\0\u6df8\0\u6e3d\0\u6e82\0\u6ec7\0\u6f0c\0\u01e3"+
    "\0\u01e3\0\u01e3\0\u6f51\0\u6f96\0\u01e3\0\u01e3\0\u01e3\0\u6fdb"+
    "\0\u7020\0\u7065\0\u70aa\0\u01e3\0\u01e3\0\u01e3\0\u01e3\0\u70ef"+
    "\0\u7134\0\u01e3\0\u01e3\0\u01e3\0\u7179\0\u01e3\0\u01e3\0\u01e3"+
    "\0\u01e3\0\u71be\0\u7203\0\u7248\0\u01e3\0\u01e3\0\u728d\0\u72d2"+
    "\0\u7317\0\u735c\0\u73a1\0\u01e3\0\u01e3\0\u01e3\0\u73e6\0\u742b"+
    "\0\u01e3\0\u01e3\0\u01e3\0\u7470\0\u01e3\0\u74b5\0\u01e3\0\u01e3"+
    "\0\u74fa\0\u753f\0\u7584\0\u01e3\0\u01e3\0\u75c9\0\u760e\0\u7653"+
    "\0\u01e3\0\u7698\0\u01e3\0\u76dd\0\u7722\0\u7767\0\u77ac\0\u77f1"+
    "\0\u7836\0\u787b\0\u01e3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[587];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\11\1\15\1\16\1\17\1\20"+
    "\1\21\3\11\1\22\1\23\1\11\1\24\1\25\1\26"+
    "\1\27\1\11\1\30\2\11\1\31\1\32\3\11\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\11\1\44\1\45\1\46\1\11\1\47\1\50\1\51"+
    "\1\52\1\11\1\53\4\11\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\2\0\1\3\2\4\2\6\1\0"+
    "\1\6\1\0\1\63\17\0\3\6\1\0\1\6\21\0"+
    "\1\64\3\0\1\65\2\0\1\66\13\0\1\61\1\0"+
    "\1\67\2\0\1\4\213\0\2\70\1\0\1\70\1\0"+
    "\1\70\16\0\1\71\3\70\1\0\1\70\53\0\2\6"+
    "\1\0\1\6\1\0\1\6\17\0\3\6\1\0\1\6"+
    "\53\0\2\6\1\0\1\6\1\0\1\6\1\0\1\72"+
    "\15\0\3\6\1\0\1\6\57\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\41\11\12\0\2\73\1\0\1\73"+
    "\1\0\1\73\17\0\3\73\1\0\1\73\57\0\1\11"+
    "\1\0\1\11\1\74\6\11\1\75\2\11\1\76\3\11"+
    "\3\0\1\77\1\0\1\11\1\100\2\11\1\101\1\102"+
    "\12\11\1\103\10\11\1\104\7\11\16\0\1\11\1\0"+
    "\4\11\1\105\12\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\10\11\1\106\6\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\5\11\1\107\11\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\3\11\1\110"+
    "\13\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\1\11\1\111\2\11\1\112\1\113\5\11\1\114\3\11"+
    "\3\0\1\11\1\0\1\11\1\115\1\116\14\11\1\117"+
    "\21\11\16\0\1\11\1\0\2\11\1\120\1\11\1\121"+
    "\3\11\1\122\2\11\1\123\3\11\3\0\1\11\1\0"+
    "\1\11\1\124\2\11\1\125\12\11\1\126\6\11\1\127"+
    "\1\11\1\130\10\11\16\0\1\11\1\0\2\11\1\131"+
    "\1\132\2\11\1\133\1\11\1\134\1\135\5\11\3\0"+
    "\1\136\1\0\1\11\1\137\22\11\1\140\10\11\1\141"+
    "\3\11\16\0\1\11\1\0\1\142\14\11\1\143\1\11"+
    "\3\0\1\11\1\0\4\11\1\144\27\11\1\145\1\11"+
    "\1\146\2\11\16\0\1\11\1\0\17\11\3\0\1\147"+
    "\1\0\41\11\12\0\2\6\1\0\1\6\1\0\1\6"+
    "\15\0\1\150\1\0\3\6\1\0\1\6\53\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\151\3\0\1\152"+
    "\7\0\3\6\1\0\1\6\53\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\153\15\0\3\6\1\0\1\6"+
    "\53\0\2\6\1\0\1\6\1\0\1\6\1\0\1\154"+
    "\15\0\3\6\1\0\1\6\57\0\1\11\1\0\16\11"+
    "\1\155\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\156\1\0\4\11\1\157\34\11\16\0"+
    "\1\11\1\0\2\11\1\160\1\11\1\161\12\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\2\11\1\162"+
    "\1\11\1\163\3\11\1\164\6\11\3\0\1\11\1\0"+
    "\4\11\1\165\2\11\1\166\31\11\16\0\1\11\1\0"+
    "\2\11\1\167\14\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\4\11\1\170\12\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\11\11\1\171\5\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\3\11\1\172"+
    "\1\173\3\11\1\174\1\175\5\11\3\0\1\11\1\0"+
    "\1\11\1\176\37\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\24\11\1\177\14\11\16\0\1\11\1\0"+
    "\15\11\1\200\1\11\3\0\1\11\1\0\4\11\1\201"+
    "\34\11\16\0\1\11\1\0\2\11\1\202\1\203\1\204"+
    "\1\11\1\205\2\11\1\206\5\11\3\0\1\11\1\0"+
    "\1\11\1\207\2\11\1\210\2\11\1\211\31\11\16\0"+
    "\1\11\1\0\1\212\15\11\1\213\3\0\1\11\1\0"+
    "\4\11\1\214\21\11\1\215\2\11\1\216\7\11\16\0"+
    "\1\11\1\0\4\11\1\217\3\11\1\220\3\11\1\221"+
    "\2\11\3\0\1\11\1\0\1\11\1\222\37\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\1\11\1\223"+
    "\37\11\16\0\1\11\1\0\4\11\1\224\12\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\2\11\1\225"+
    "\6\11\1\226\5\11\3\0\1\11\1\0\16\11\1\227"+
    "\22\11\16\0\1\11\1\0\11\11\1\230\5\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\4\11\1\231"+
    "\12\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\2\11\1\232\1\11\1\233\12\11\3\0\1\11\1\0"+
    "\41\11\12\0\2\6\1\234\1\6\1\0\1\6\17\0"+
    "\3\6\1\0\1\6\62\0\1\235\125\0\1\236\56\0"+
    "\1\234\106\0\1\11\1\0\2\11\1\237\5\11\1\240"+
    "\6\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\5\11\1\241\33\11\16\0"+
    "\1\11\1\0\14\11\1\242\2\11\3\0\1\11\1\0"+
    "\7\11\1\243\31\11\16\0\1\11\1\0\4\11\1\244"+
    "\12\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\12\11\1\245\26\11\16\0"+
    "\1\11\1\0\2\11\1\246\14\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\3\11\1\247\13\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\10\11\1\250\30\11\16\0\1\11\1\0"+
    "\11\11\1\251\5\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\12\11\1\252"+
    "\26\11\16\0\1\11\1\0\4\11\1\253\12\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\254\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\12\11\1\255\26\11\16\0\1\11\1\0"+
    "\5\11\1\256\11\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\1\11\1\257\15\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\10\11\1\260\6\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\17\11\1\261\21\11\16\0\1\11\1\0"+
    "\1\11\1\262\14\11\1\263\3\0\1\11\1\0\4\11"+
    "\1\264\34\11\16\0\1\11\1\0\16\11\1\265\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\3\11\1\266"+
    "\13\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\1\267\16\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\1\11\1\270\13\11\1\271\1\11\3\0\1\11"+
    "\1\0\4\11\1\272\34\11\16\0\1\11\1\0\2\11"+
    "\1\273\14\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\1\11\1\274\4\11"+
    "\1\275\32\11\16\0\1\11\1\0\2\11\1\276\14\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\2\11"+
    "\1\277\14\11\3\0\1\11\1\0\5\11\1\300\33\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\1\301"+
    "\11\11\1\302\26\11\16\0\1\11\1\0\3\11\1\303"+
    "\13\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\3\11\1\304\13\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\12\11\1\305"+
    "\26\11\16\0\1\11\1\0\7\11\1\306\7\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\13\11\1\307"+
    "\3\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\12\11\1\310\4\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\15\11\1\311"+
    "\23\11\16\0\1\11\1\0\10\11\1\312\6\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\5\11\1\313\33\11\16\0\1\11\1\0"+
    "\4\11\1\314\12\11\3\0\1\11\1\0\41\11\32\0"+
    "\1\315\104\0\1\316\105\0\1\317\113\0\1\320\104\0"+
    "\1\321\60\0\1\11\1\0\2\11\1\322\14\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\4\11\1\323"+
    "\3\11\1\324\6\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\15\11\1\325\1\11\3\0\1\11\1\0"+
    "\24\11\1\326\14\11\16\0\1\11\1\0\4\11\1\327"+
    "\11\11\1\330\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\12\11\1\331\2\11\1\332\1\333\3\0\1\11"+
    "\1\0\4\11\1\334\1\335\33\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\1\11\1\336\37\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\4\11\1\337"+
    "\34\11\16\0\1\11\1\0\4\11\1\340\12\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\6\11\1\341"+
    "\10\11\3\0\1\11\1\0\27\11\1\342\11\11\16\0"+
    "\1\11\1\0\11\11\1\343\5\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\16\11\1\344\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\4\11\1\345\12\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\11\11"+
    "\1\346\5\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\1\11\1\347\37\11"+
    "\16\0\1\11\1\0\5\11\1\350\11\11\3\0\1\11"+
    "\1\0\4\11\1\351\34\11\16\0\1\11\1\0\16\11"+
    "\1\352\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\15\11\1\353\1\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\16\11\1\354\3\0\1\11\1\0\15\11"+
    "\1\355\23\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\4\11\1\356\34\11\16\0\1\11\1\0\12\11"+
    "\1\357\4\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\4\11\1\253\3\11\1\360\6\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\1\11\1\361\37\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\20\11\1\362\1\11\1\363\16\11"+
    "\16\0\1\11\1\0\3\11\1\364\11\11\1\365\1\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\4\11\1\366\34\11\16\0\1\11"+
    "\1\0\2\11\1\367\1\11\1\370\12\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\21\11\1\371\17\11\16\0\1\11\1\0\13\11"+
    "\1\372\3\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\16\11\1\373\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\4\11\1\374"+
    "\34\11\16\0\1\11\1\0\2\11\1\375\14\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\4\11\1\376\34\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\2\11\1\377\6\11\1\u0100"+
    "\1\u0101\2\11\1\u0102\23\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\10\11\1\u0103\30\11\16\0\1\11"+
    "\1\0\15\11\1\u0104\1\11\3\0\1\11\1\0\4\11"+
    "\1\u0105\34\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\1\u0106\40\11\16\0\1\11\1\0\4\11\1\u0107"+
    "\12\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\12\11\1\u0108\4\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\16\11\1\u0109\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\1\u010a\16\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\5\11\1\u010b\33\11\16\0\1\11\1\0\15\11\1\u010c"+
    "\1\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\1\u010d\40\11\16\0\1\11"+
    "\1\0\2\11\1\u010e\14\11\3\0\1\11\1\0\41\11"+
    "\12\0\1\u010f\2\0\1\u010f\1\0\1\u010f\17\0\3\u010f"+
    "\61\0\1\11\1\0\3\11\1\u0110\13\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\2\11\1\u0111\14\11"+
    "\3\0\1\11\1\0\12\11\1\u0112\26\11\16\0\1\11"+
    "\1\0\4\11\1\u0113\12\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\21\11"+
    "\1\u0114\17\11\16\0\1\11\1\0\1\11\1\u0115\1\11"+
    "\1\u0116\1\u0117\12\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\12\11\1\u0118"+
    "\26\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\1\u0119\40\11\16\0\1\11\1\0\10\11\1\u011a\6\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\15\11"+
    "\1\u011b\1\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\4\11\1\u011c\34\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\1\u011d"+
    "\40\11\16\0\1\11\1\0\10\11\1\u011e\6\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\10\11\1\u011f"+
    "\1\u0120\5\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\3\11\1\u0121\13\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\u0122\1\0\41\11"+
    "\16\0\1\11\1\0\16\11\1\u0123\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\1\u0124\40\11\16\0\1\11\1\0\16\11\1\u0125\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\11\11\1\u0126"+
    "\4\11\1\u0127\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\15\11\1\u0128\23\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\5\11"+
    "\1\u0129\33\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\4\11\1\u012a\34\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\24\11\1\u012b\14\11\16\0\1\11"+
    "\1\0\15\11\1\u012c\1\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\10\11\1\u012d\6\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\2\11\1\u012e\36\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\1\u012f\40\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\u0130\1\0\41\11\16\0\1\11\1\0"+
    "\10\11\1\u0131\6\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\4\11\1\u0132\12\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\15\11\1\u0133\1\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\10\11\1\u0134"+
    "\6\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\14\11\1\u0134\2\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\4\11\1\u0135\12\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\5\11\1\u0136\33\11\16\0\1\11\1\0\10\11\1\u0137"+
    "\6\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\1\11\1\u0115\15\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\3\11\1\u0138\13\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\5\11\1\u0139\33\11\16\0\1\11\1\0\2\11\1\u013a"+
    "\14\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\10\11\1\u013b\6\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\1\11\1\u013c"+
    "\37\11\16\0\1\11\1\0\16\11\1\u013d\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\1\11\1\u013e\15\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\6\11\1\u013f\32\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\6\11\1\u0140\32\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\4\11"+
    "\1\u0141\34\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\6\11\1\u0142\32\11\16\0\1\11\1\0\15\11"+
    "\1\u0143\1\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\4\11\1\u0144\12\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\5\11"+
    "\1\u0145\33\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\3\11\1\u0146\35\11\16\0\1\11\1\0\15\11"+
    "\1\u0147\1\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\16\11\1\u0148\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\4\11\1\u0149"+
    "\34\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\2\11\1\u014a\12\11\1\u014b\23\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\15\11\1\u014c\23\11\16\0"+
    "\1\11\1\0\10\11\1\u014d\6\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\2\11\1\u014e\14\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\5\11\1\u014f\33\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\6\11\1\u0150\32\11\16\0"+
    "\1\11\1\0\1\11\1\u0151\15\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\4\11\1\u0152\12\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\10\11\1\u0153"+
    "\6\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\10\11\1\u0154\6\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\10\11\1\u0155\6\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\4\11\1\u0156\34\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\7\11\1\u0156\31\11\16\0\1\11\1\0"+
    "\16\11\1\u0157\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\11\11\1\u0158\27\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\4\11"+
    "\1\u0159\34\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\11\11\1\u015a\27\11\16\0\1\11\1\0\2\11"+
    "\1\u015b\14\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\32\11\1\u015c\6\11"+
    "\16\0\1\11\1\0\11\11\1\u015d\5\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\10\11\1\u015e\6\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\24\11\1\u015f\14\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\4\11\1\u0160\34\11"+
    "\16\0\1\11\1\0\10\11\1\u0161\6\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\1\11\1\u0162\37\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\4\11\1\u0163\34\11\16\0\1\11"+
    "\1\0\4\11\1\u0164\12\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\6\11\1\u0165\10\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\15\11\1\u0166\1\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\11\11"+
    "\1\u0167\5\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\12\11\1\u0168\26\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\6\11"+
    "\1\u0169\32\11\16\0\1\11\1\0\10\11\1\u016a\6\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\16\11"+
    "\1\u016b\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\1\u016c\16\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\6\11\1\u016d\32\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\33\11"+
    "\1\u016e\5\11\16\0\1\11\1\0\10\11\1\u016f\6\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\4\11\1\u0170\34\11\12\0\2\u0171"+
    "\1\0\1\u0171\1\0\1\u0171\17\0\3\u0171\1\0\1\u0171"+
    "\57\0\1\11\1\0\1\11\1\u0172\15\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\4\11\1\u0173\34\11\16\0\1\11\1\0\15\11"+
    "\1\u0174\1\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\7\11\1\u0173\31\11"+
    "\16\0\1\11\1\0\1\11\1\u0175\15\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\1\11\1\u0176\15\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\4\11"+
    "\1\u0177\12\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\10\11\1\u0178\6\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\11\11"+
    "\1\u0179\27\11\16\0\1\11\1\0\2\11\1\u017a\14\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\3\11"+
    "\1\u017b\13\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\15\11\1\u017c\1\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\5\11"+
    "\1\u017d\33\11\16\0\1\11\1\0\1\11\1\u017e\15\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\11\11"+
    "\1\u017f\5\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\4\11\1\u0180\12\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\4\11\1\u0181\12\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\2\11\1\u0182\14\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\u0183\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\1\11\1\u0184\37\11\16\0\1\11"+
    "\1\0\1\11\1\u0185\15\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\10\11\1\u0186\6\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\15\11\1\u0187\1\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\4\11"+
    "\1\u0188\12\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\31\11\1\u0189\7\11"+
    "\16\0\1\11\1\0\2\11\1\u018a\1\11\1\u018b\12\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\31\11\1\u018c\7\11\16\0\1\11"+
    "\1\0\1\11\1\u018d\15\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\16\11\1\u018e\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\11\11\1\u018f\27\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\6\11\1\u0190\32\11\16\0\1\11\1\0"+
    "\3\11\1\u0191\13\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\12\11\1\u0192"+
    "\26\11\16\0\1\11\1\0\10\11\1\u0193\6\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\10\11\1\u0194"+
    "\6\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\5\11\1\u0195\33\11\16\0"+
    "\1\11\1\0\12\11\1\u0196\4\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\31\11\1\u0197\7\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\6\11\1\u0198\32\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\27\11\1\u0198\11\11\16\0"+
    "\1\11\1\0\16\11\1\u0199\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\10\11\1\u019a\6\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\2\11\1\u019b\14\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\11\11"+
    "\1\u019c\5\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\15\11\1\u019d\23\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\4\11"+
    "\1\u019e\34\11\16\0\1\11\1\0\15\11\1\u019f\1\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\24\11\1\u01a0\14\11\16\0\1\11"+
    "\1\0\4\11\1\u01a1\12\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\2\11\1\u01a2\14\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\1\11\1\u01a3\37\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\11\11\1\u01a4\27\11\16\0\1\11"+
    "\1\0\2\11\1\u01a5\14\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\1\11\1\u01a6\15\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\10\11\1\u01a7\6\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\3\11"+
    "\1\u01a8\13\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\1\11\1\u01a9\15\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\22\11"+
    "\1\u01aa\16\11\16\0\1\11\1\0\16\11\1\u01ab\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\24\11\1\u01ac\14\11\16\0\1\11\1\0"+
    "\3\11\1\u01ad\13\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\4\11\1\u01ae"+
    "\34\11\16\0\1\11\1\0\2\11\1\u01af\14\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\1\11\1\u01b0\37\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\20\11\1\u01b1\20\11\16\0"+
    "\1\11\1\0\11\11\1\u01b2\5\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\15\11\1\u01b3\1\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\10\11\1\u01b4"+
    "\6\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\10\11\1\u01b5\6\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\10\11\1\u01b6\6\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\20\11\1\u01b7\20\11\16\0\1\11\1\0\1\11\1\u01b8"+
    "\15\11\3\0\1\11\1\0\41\11\6\0\2\u01b9\1\0"+
    "\102\u01b9\10\0\1\11\1\0\12\11\1\u01ba\4\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\11\11\1\u01bb"+
    "\5\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\3\11\1\u01bc\13\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\15\11\1\u01bd\1\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\11\11\1\u01be\5\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\5\11\1\u01bf\33\11\16\0\1\11\1\0"+
    "\16\11\1\u01c0\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\11\11\1\u01c1\5\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\1\11"+
    "\1\u01c2\37\11\16\0\1\11\1\0\15\11\1\u01c3\1\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\12\11"+
    "\1\u01c4\4\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\15\11\1\u01c5\1\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\5\11"+
    "\1\u01c6\33\11\16\0\1\11\1\0\10\11\1\u01c7\6\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\12\11\1\u01c8\26\11\16\0\1\11"+
    "\1\0\11\11\1\u01c9\5\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\4\11"+
    "\1\u01ca\34\11\16\0\1\11\1\0\11\11\1\u01cb\5\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\1\11\1\u01cc\37\11\16\0\1\11"+
    "\1\0\3\11\1\u01cd\13\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\2\11"+
    "\1\u01ce\36\11\16\0\1\11\1\0\16\11\1\u01cf\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\11\11\1\u01d0"+
    "\5\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\16\11\1\u01d1\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\10\11\1\u01d2\6\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\1\11\1\u01d3\15\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\4\11\1\u01d4\12\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\16\11"+
    "\1\u01d5\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\16\11\1\u01d6\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\1\11\1\u01d7\15\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\15\11\1\u01d8\1\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\4\11\1\u01d9\34\11\16\0\1\11\1\0\10\11"+
    "\1\u01da\6\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\16\11\1\u01db\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\15\11\1\u01dc\1\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\15\11\1\u01dd\1\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\15\11\1\u01de"+
    "\1\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\2\11\1\u01df\14\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\31\11\1\u01e0"+
    "\7\11\16\0\1\11\1\0\3\11\1\u01e1\13\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\2\11\1\u01e2"+
    "\14\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\11\11\1\u01e3\5\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\21\11\1\u01e4"+
    "\17\11\16\0\1\11\1\0\1\11\1\u01e5\15\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\16\11\1\u01e6"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\2\11"+
    "\1\u01e7\14\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\24\11\1\u01e8\14\11"+
    "\16\0\1\11\1\0\15\11\1\u01e9\1\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\30\11\1\u01ea\10\11\16\0\1\11\1\0\15\11"+
    "\1\u01eb\1\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\11\11\1\u01ec\27\11"+
    "\16\0\1\11\1\0\3\11\1\u01ed\13\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\12\11\1\u01ee\4\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\12\11"+
    "\1\u01ef\4\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\15\11\1\u01f0\1\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\10\11\1\u01f1\6\11\3\0\1\11"+
    "\1\0\41\11\12\0\2\u01f2\1\0\1\u01f2\1\0\1\u01f2"+
    "\17\0\3\u01f2\1\0\1\u01f2\57\0\1\11\1\0\15\11"+
    "\1\u01f3\1\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\1\11\1\u01f4\15\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\15\11\1\u01f5\1\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\10\11\1\u01f6\6\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\11\11"+
    "\1\u01f7\5\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\2\11\1\u01f8\14\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\3\11\1\u01f9\13\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\11\11\1\u01fa\27\11\16\0\1\11\1\0\2\11"+
    "\1\u01fb\14\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\6\11\1\u01fc\32\11"+
    "\16\0\1\11\1\0\12\11\1\u01fd\4\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\15\11\1\u01fe\1\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\11\11"+
    "\1\u01ff\5\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\17\11\3\0\1\11\1\0\5\11\1\u0200\33\11"+
    "\16\0\1\11\1\0\1\11\1\u0201\15\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\4\11\1\u0202\12\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\10\11"+
    "\1\u0203\6\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\4\11\1\u0204\12\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\1\11"+
    "\1\u0205\37\11\16\0\1\11\1\0\16\11\1\u0206\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\11\11\1\u0207"+
    "\5\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\11\11\1\u0208\27\11\16\0"+
    "\1\11\1\0\10\11\1\u0209\6\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\10\11\1\u020a\1\u020b\5\11"+
    "\3\0\1\11\1\0\41\11\16\0\1\11\1\0\1\11"+
    "\1\u020c\15\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\1\11\1\u020d\15\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\12\11\1\u020e\4\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\4\11\1\u020f\34\11\16\0\1\11\1\0\2\11"+
    "\1\u0210\14\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\15\11\1\u0211\1\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\15\11\1\u0212\1\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\30\11\1\u0213\10\11\16\0\1\11\1\0\10\11"+
    "\1\u0214\6\11\3\0\1\11\1\0\41\11\16\0\1\11"+
    "\1\0\3\11\1\u0215\13\11\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\12\11\1\u0216\4\11\3\0\1\11"+
    "\1\0\41\11\16\0\1\11\1\0\17\11\3\0\1\11"+
    "\1\0\14\11\1\u0216\24\11\16\0\1\11\1\0\17\11"+
    "\3\0\1\11\1\0\11\11\1\u0217\27\11\16\0\1\11"+
    "\1\0\16\11\1\u0218\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\15\11\1\u0219\1\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\11\11\1\u021a\27\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\11\11\1\u021b\27\11\16\0\1\11\1\0"+
    "\12\11\1\u021c\4\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\2\11\1\u021d"+
    "\36\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\4\11\1\u021e\34\11\16\0\1\11\1\0\15\11\1\u021f"+
    "\1\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\4\11\1\u0220\34\11\16\0"+
    "\1\11\1\0\17\11\3\0\1\11\1\0\11\11\1\u0221"+
    "\27\11\16\0\1\11\1\0\15\11\1\u0222\1\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\2\11\1\u0223"+
    "\14\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\1\11\1\u0224\37\11\16\0"+
    "\1\11\1\0\3\11\1\u0225\13\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\15\11\1\u0226\1\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\3\11\1\u0227"+
    "\13\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\11\11\1\u0228\5\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\4\11\1\u0229\12\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\2\11\1\u022a\36\11\16\0\1\11\1\0\11\11\1\u022b"+
    "\5\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\24\11\1\u022c\14\11\16\0"+
    "\1\11\1\0\1\11\1\u022d\15\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\11\11\1\u022e\27\11\16\0\1\11\1\0\13\11\1\u022d"+
    "\3\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\12\11\1\u022f\26\11\16\0"+
    "\1\11\1\0\12\11\1\u0230\4\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\10\11\1\u0231\6\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\11\11\1\u0232\27\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\4\11\1\u0233\34\11\16\0"+
    "\1\11\1\0\15\11\1\u0234\1\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\1\11\1\u0235\15\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\4\11\1\u0236"+
    "\12\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\15\11\1\u0237\1\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\10\11\1\u0238\6\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\15\11\1\u0239\1\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\4\11\1\u023a"+
    "\12\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\11\11\1\u023b\5\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\12\11\1\u023c\4\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\15\11\1\u023d\1\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\17\11\3\0"+
    "\1\11\1\0\1\11\1\u023e\37\11\16\0\1\11\1\0"+
    "\3\11\1\u023f\13\11\3\0\1\11\1\0\41\11\16\0"+
    "\1\11\1\0\15\11\1\u0240\1\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\10\11\1\u0241\6\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\1\11\1\u0242"+
    "\15\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\11\11\1\u0243\27\11\16\0"+
    "\1\11\1\0\16\11\1\u0244\3\0\1\11\1\0\41\11"+
    "\16\0\1\11\1\0\17\11\3\0\1\11\1\0\1\u0245"+
    "\40\11\16\0\1\11\1\0\2\11\1\u0246\14\11\3\0"+
    "\1\11\1\0\41\11\16\0\1\11\1\0\15\11\1\u0247"+
    "\1\11\3\0\1\11\1\0\41\11\16\0\1\11\1\0"+
    "\17\11\3\0\1\11\1\0\4\11\1\u0248\34\11\16\0"+
    "\1\11\1\0\11\11\1\u0249\5\11\3\0\1\11\1\0"+
    "\41\11\16\0\1\11\1\0\17\11\3\0\1\11\1\0"+
    "\6\11\1\u024a\32\11\16\0\1\11\1\0\10\11\1\u024b"+
    "\6\11\3\0\1\11\1\0\41\11\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\1\11\2\1\1\11\46\1\12\11"+
    "\1\1\3\0\54\1\5\0\57\1\1\0\2\11\56\1"+
    "\5\11\75\1\1\0\251\1\1\0\70\1\1\11\131\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[587];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { return symbol(sym.BAD_LITERAL);
          }
        case 155: break;
        case 118: 
          { return symbol(sym.PALMING_LITERAL);
          }
        case 156: break;
        case 134: 
          { return symbol(sym.REPLACED_LITERAL);
          }
        case 157: break;
        case 74: 
          { return symbol(sym.FREE_LITERAL);
          }
        case 158: break;
        case 37: 
          { return symbol(sym.SUBSTITUTION);
          }
        case 159: break;
        case 99: 
          { return symbol(sym.ALLEY_LITERAL);
          }
        case 160: break;
        case 20: 
          { return symbol(sym.NEUTRAL);
          }
        case 161: break;
        case 122: 
          { return symbol(sym.DRIVING_LITERAL);
          }
        case 162: break;
        case 105: 
          { return symbol(sym.EXCESS_LITERAL);
          }
        case 163: break;
        case 106: 
          { return symbol(sym.CHARGE_LITERAL);
          }
        case 164: break;
        case 67: 
          { return symbol(sym.LANE_LITERAL);
          }
        case 165: break;
        case 75: 
          { return symbol(sym.FOUL_LITERAL);
          }
        case 166: break;
        case 45: 
          { return symbol(sym.SECOND);
          }
        case 167: break;
        case 87: 
          { return symbol(sym.SHORT_LITERAL);
          }
        case 168: break;
        case 62: 
          { return symbol(sym.POSS_LITERAL);
          }
        case 169: break;
        case 147: 
          { return symbol(sym.BACKCOURT_LITERAL);
          }
        case 170: break;
        case 110: 
          { return symbol(sym.FINGER_LITERAL);
          }
        case 171: break;
        case 27: 
          { return symbol(sym.PENALTY);
          }
        case 172: break;
        case 150: 
          { return symbol(sym.TURNAROUND_LITERAL);
          }
        case 173: break;
        case 127: 
          { return symbol(sym.ILLEGAL_LITERAL);
          }
        case 174: break;
        case 119: 
          { return symbol(sym.PUTBACK_LITERAL);
          }
        case 175: break;
        case 39: 
          { return symbol(sym.OFF_LITERAL);
          }
        case 176: break;
        case 54: 
          { return symbol(sym.ASSIST);
          }
        case 177: break;
        case 13: 
          { yybegin(PLAYINFO); return symbol(sym.LEFT_CURLY);
          }
        case 178: break;
        case 46: 
          { return symbol(sym.THIRD);
          }
        case 179: break;
        case 56: 
          { return symbol(sym.STEP_LITERAL);
          }
        case 180: break;
        case 44: 
          { return symbol(sym.END_LITERAL);
          }
        case 181: break;
        case 94: 
          { return symbol(sym.BELOW_LITERAL);
          }
        case 182: break;
        case 69: 
          { return symbol(sym.BANK_LITERAL);
          }
        case 183: break;
        case 40: 
          { return symbol(sym.OUT_LITERAL);
          }
        case 184: break;
        case 19: 
          { return symbol(sym.HOME_TEAM);
          }
        case 185: break;
        case 72: 
          { return symbol(sym.DUNK_LITERAL);
          }
        case 186: break;
        case 15: 
          { return symbol(sym.RIGHT_PAREN);
          }
        case 187: break;
        case 114: 
          { return symbol(sym.JUMPER_LITERAL);
          }
        case 188: break;
        case 146: 
          { return symbol(sym.TECHNICAL_LITERAL);
          }
        case 189: break;
        case 108: 
          { return symbol(sym.BOUNDS_LITERAL);
          }
        case 190: break;
        case 65: 
          { return symbol(sym.TEAM_LITERAL);
          }
        case 191: break;
        case 104: 
          { return symbol(sym.ELBOWS_LITERAL);
          }
        case 192: break;
        case 148: 
          { return symbol(sym.VIOLATION_LITERAL);
          }
        case 193: break;
        case 107: 
          { return symbol(sym.BASKET_LITERAL);
          }
        case 194: break;
        case 153: 
          { return symbol(sym.GOALTENDING_LITERAL);
          }
        case 195: break;
        case 112: 
          { return symbol(sym.REPLAY_LITERAL);
          }
        case 196: break;
        case 23: 
          { return symbol(sym.OF_LITERAL);
          }
        case 197: break;
        case 9: 
          { return symbol(sym.L_LITERAL);
          }
        case 198: break;
        case 143: 
          { return symbol(sym.FLOATING_LITERAL);
          }
        case 199: break;
        case 130: 
          { return symbol(sym.REBOUND_LITERAL);
          }
        case 200: break;
        case 141: 
          { return symbol(sym.FADEAWAY_LITERAL);
          }
        case 201: break;
        case 33: 
          { return symbol(sym.FIRST);
          }
        case 202: break;
        case 132: 
          { return symbol(sym.SHOOTING_LITERAL);
          }
        case 203: break;
        case 131: 
          { return symbol(sym.RUNNING_LITERAL);
          }
        case 204: break;
        case 76: 
          { return symbol(sym.FULL_LITERAL);
          }
        case 205: break;
        case 103: 
          { return symbol(sym.PULLUP_LITERAL);
          }
        case 206: break;
        case 47: 
          { return symbol(sym.THREEPT_LITERAL);
          }
        case 207: break;
        case 64: 
          { return symbol(sym.TAKE_LITERAL);
          }
        case 208: break;
        case 102: 
          { return symbol(sym.PERIOD_LITERAL);
          }
        case 209: break;
        case 89: 
          { return symbol(sym.THROW_LITERAL);
          }
        case 210: break;
        case 123: 
          { return symbol(sym.DRIBBLE_LITERAL);
          }
        case 211: break;
        case 60: 
          { return symbol(sym.PATH_LITERAL);
          }
        case 212: break;
        case 1: 
          { return symbol(sym.PLAYER_NAME, yytext());
          }
        case 213: break;
        case 137: 
          { return symbol(sym.PERSONAL_LITERAL);
          }
        case 214: break;
        case 135: 
          { return symbol(sym.OFFICIAL_LITERAL);
          }
        case 215: break;
        case 95: 
          { return symbol(sym.BLOCK_LITERAL);
          }
        case 216: break;
        case 3: 
          { return symbol(sym.NUMBER, yytext());
          }
        case 217: break;
        case 41: 
          { return symbol(sym.POINTS);
          }
        case 218: break;
        case 77: 
          { return symbol(sym.AWAY_LITERAL);
          }
        case 219: break;
        case 97: 
          { return symbol(sym.DELAY_LITERAL);
          }
        case 220: break;
        case 28: 
          { return symbol(sym.TURNOVER);
          }
        case 221: break;
        case 31: 
          { return symbol(sym.AM);
          }
        case 222: break;
        case 68: 
          { return symbol(sym.LOST_LITERAL);
          }
        case 223: break;
        case 70: 
          { return symbol(sym.BALL_LITERAL);
          }
        case 224: break;
        case 91: 
          { return symbol(sym.CLEAR_LITERAL);
          }
        case 225: break;
        case 80: 
          { return symbol(sym.HOOK_LITERAL);
          }
        case 226: break;
        case 101: 
          { return symbol(sym.SCREEN_LITERAL);
          }
        case 227: break;
        case 88: 
          { return symbol(sym.OTHER_LITERAL);
          }
        case 228: break;
        case 98: 
          { return symbol(sym.FIRST_LITERAL);
          }
        case 229: break;
        case 151: 
          { return symbol(sym.POSSESSION_LITERAL);
          }
        case 230: break;
        case 38: 
          { return symbol(sym.OOP_LITERAL);
          }
        case 231: break;
        case 100: 
          { return symbol(sym.SECOND_LITERAL);
          }
        case 232: break;
        case 10: 
          { return symbol(sym.B_LITERAL);
          }
        case 233: break;
        case 8: 
          { return symbol(sym.C_LITERAL);
          }
        case 234: break;
        case 73: 
          { return symbol(sym.FADE_LITERAL);
          }
        case 235: break;
        case 117: 
          { return symbol(sym.SUPPORT_LITERAL);
          }
        case 236: break;
        case 96: 
          { return symbol(sym.GAINS_LITERAL);
          }
        case 237: break;
        case 6: 
          { return symbol(sym.P_LITERAL);
          }
        case 238: break;
        case 144: 
          { return symbol(sym.OFFENSIVE_LITERAL);
          }
        case 239: break;
        case 109: 
          { return symbol(sym.DOUBLE_LITERAL);
          }
        case 240: break;
        case 63: 
          { return symbol(sym.PLAY_LITERAL);
          }
        case 241: break;
        case 83: 
          { return symbol(sym.GAME_LITERAL);
          }
        case 242: break;
        case 81: 
          { return symbol(sym.MADE_LITERAL);
          }
        case 243: break;
        case 124: 
          { return symbol(sym.DEFENSE_LITERAL);
          }
        case 244: break;
        case 25: 
          { return symbol(sym.PERSONAL_FOUL);
          }
        case 245: break;
        case 49: 
          { return symbol(sym.SIXTH);
          }
        case 246: break;
        case 55: 
          { return symbol(sym.REGULAR);
          }
        case 247: break;
        case 43: 
          { return symbol(sym.EST);
          }
        case 248: break;
        case 32: 
          { return symbol(sym.NO_LITERAL);
          }
        case 249: break;
        case 30: 
          { return symbol(sym.BY_LITERAL);
          }
        case 250: break;
        case 18: 
          { return symbol(sym.AWAY_TEAM);
          }
        case 251: break;
        case 36: 
          { return symbol(sym.STEAL);
          }
        case 252: break;
        case 66: 
          { return symbol(sym.TYPE_LITERAL);
          }
        case 253: break;
        case 42: 
          { return symbol(sym.TIP_LITERAL);
          }
        case 254: break;
        case 59: 
          { return symbol(sym.FROM_LITERAL);
          }
        case 255: break;
        case 78: 
          { return symbol(sym.ROLL_LITERAL);
          }
        case 256: break;
        case 92: 
          { return symbol(sym.LAYUP_LITERAL);
          }
        case 257: break;
        case 16: 
          { return symbol(sym.COMMA);
          }
        case 258: break;
        case 14: 
          { return symbol(sym.LEFT_PAREN);
          }
        case 259: break;
        case 24: 
          { return symbol(sym.OVERTIME);
          }
        case 260: break;
        case 126: 
          { return symbol(sym.INBOUND_LITERAL);
          }
        case 261: break;
        case 116: 
          { return symbol(sym.KICKED_LITERAL);
          }
        case 262: break;
        case 129: 
          { return symbol(sym.REGULAR_LITERAL);
          }
        case 263: break;
        case 17: 
          { return symbol(sym.POUND_SIGN);
          }
        case 264: break;
        case 35: 
          { return symbol(sym.SEC_LITERAL);
          }
        case 265: break;
        case 79: 
          { return symbol(sym.JUMP_LITERAL);
          }
        case 266: break;
        case 26: 
          { return symbol(sym.PM);
          }
        case 267: break;
        case 125: 
          { return symbol(sym.INSTANT_LITERAL);
          }
        case 268: break;
        case 90: 
          { return symbol(sym.CLOCK_LITERAL);
          }
        case 269: break;
        case 133: 
          { return symbol(sym.SWINGING_LITERAL);
          }
        case 270: break;
        case 4: 
          { return symbol(sym.COLON);
          }
        case 271: break;
        case 57: 
          { return symbol(sym.SHOT_LITERAL);
          }
        case 272: break;
        case 128: 
          { return symbol(sym.REVERSE_LITERAL);
          }
        case 273: break;
        case 113: 
          { return symbol(sym.RULING_LITERAL);
          }
        case 274: break;
        case 111: 
          { return symbol(sym.ASSIST_LITERAL);
          }
        case 275: break;
        case 5: 
          { return symbol(sym.S_LITERAL);
          }
        case 276: break;
        case 138: 
          { return symbol(sym.TAUNTING_LITERAL);
          }
        case 277: break;
        case 149: 
          { return symbol(sym.DEFENSIVE_LITERAL);
          }
        case 278: break;
        case 152: 
          { return symbol(sym.DISCONTINUE_LITERAL);
          }
        case 279: break;
        case 139: 
          { return symbol(sym.TURNOVER_LITERAL);
          }
        case 280: break;
        case 61: 
          { return symbol(sym.PASS_LITERAL);
          }
        case 281: break;
        case 115: 
          { return symbol(sym.MISSED_LITERAL);
          }
        case 282: break;
        case 58: 
          { return symbol(sym.SLAM_LITERAL);
          }
        case 283: break;
        case 12: 
          { return symbol(sym.SINGLE_QUOTE);
          }
        case 284: break;
        case 71: 
          { return symbol(sym.BACK_LITERAL);
          }
        case 285: break;
        case 21: 
          { yybegin(YYINITIAL); return symbol(sym.RIGHT_CURLY);
          }
        case 286: break;
        case 86: 
          { return symbol(sym.STEAL_LITERAL);
          }
        case 287: break;
        case 53: 
          { return symbol(sym.FOR_LITERAL);
          }
        case 288: break;
        case 120: 
          { return symbol(sym.PUNCHED_LITERAL);
          }
        case 289: break;
        case 140: 
          { return symbol(sym.EJECTION_LITERAL);
          }
        case 290: break;
        case 7: 
          { return symbol(sym.T_LITERAL);
          }
        case 291: break;
        case 22: 
          { return symbol(sym.TO_LITERAL);
          }
        case 292: break;
        case 145: 
          { return symbol(sym.TRAVELING_LITERAL);
          }
        case 293: break;
        case 142: 
          { return symbol(sym.FLAGRANT_LITERAL);
          }
        case 294: break;
        case 11: 
          { return symbol(sym.PERIOD);
          }
        case 295: break;
        case 154: 
          { return symbol(sym.UNSPORTSMANLIKE);
          }
        case 296: break;
        case 82: 
          { return symbol(sym.MISS_LITERAL);
          }
        case 297: break;
        case 52: 
          { return symbol(sym.DEF);
          }
        case 298: break;
        case 34: 
          { return symbol(sym.FIFTH);
          }
        case 299: break;
        case 48: 
          { return symbol(sym.FOURTH);
          }
        case 300: break;
        case 29: 
          { return symbol(sym.VS_LITERAL);
          }
        case 301: break;
        case 84: 
          { return symbol(sym.TIME, yytext());
          }
        case 302: break;
        case 93: 
          { return symbol(sym.LOOSE_LITERAL);
          }
        case 303: break;
        case 85: 
          { return symbol(sym.START_LITERAL);
          }
        case 304: break;
        case 136: 
          { return symbol(sym.OVERTURN_LITERAL);
          }
        case 305: break;
        case 121: 
          { return symbol(sym.TIMEOUT_LITERAL);
          }
        case 306: break;
        case 51: 
          { return symbol(sym.BLOCK);
          }
        case 307: break;
        case 2: 
          { 
          }
        case 308: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          scanner = new Yylex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
