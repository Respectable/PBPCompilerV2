
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 25 19:54:51 CDT 2013
//----------------------------------------------------

package parser;

import java.util.ArrayList;
import nba.*;
import nba.play.*;
import nba.playType.*;
import nba.playType.block.*;
import nba.playType.ejection.*;
import nba.playType.foul.*;
import nba.playType.freeThrow.*;
import nba.playType.jumpBall.*;
import nba.playType.rebound.*;
import nba.playType.review.*;
import nba.playType.shot.*;
import nba.playType.steal.*;
import nba.playType.substitution.*;
import nba.playType.technical.*;
import nba.playType.timeout.*;
import nba.playType.turnover.*;
import nba.playType.violation.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 25 19:54:51 CDT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\313\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\006\007\000\002\007\007\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\007\000\002\013\003\000\002\013\003" +
    "\000\002\014\004\000\002\015\004\000\002\015\002\000" +
    "\002\016\005\000\002\016\006\000\002\016\004\000\002" +
    "\017\004\000\002\020\004\000\002\020\002\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\010\000\002\023\007\000\002\023\002" +
    "\000\002\024\007\000\002\025\004\000\002\025\004\000" +
    "\002\025\005\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\004\000\002\025\006\000\002\025" +
    "\004\000\002\025\005\000\002\025\007\000\002\025\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\025\006\000\002" +
    "\025\005\000\002\025\005\000\002\025\006\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\006" +
    "\000\002\025\006\000\002\025\004\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\005\000" +
    "\002\025\006\000\002\025\007\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\005\000\002\025" +
    "\005\000\002\025\006\000\002\025\006\000\002\025\006" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\026\004\000\002\026\002\000\002" +
    "\027\006\000\002\030\007\000\002\030\002\000\002\031" +
    "\004\000\002\032\005\000\002\032\005\000\002\032\004" +
    "\000\002\032\004\000\002\032\010\000\002\032\007\000" +
    "\002\032\006\000\002\032\006\000\002\032\005\000\002" +
    "\032\005\000\002\032\004\000\002\032\004\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\004\000\002\032\006\000\002\032\005\000" +
    "\002\032\004\000\002\032\005\000\002\032\006\000\002" +
    "\032\006\000\002\032\006\000\002\032\006\000\002\032" +
    "\007\000\002\032\005\000\002\032\005\000\002\032\006" +
    "\000\002\032\006\000\002\032\005\000\002\033\011\000" +
    "\002\033\007\000\002\034\013\000\002\034\003\000\002" +
    "\035\004\000\002\036\007\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\004" +
    "\000\002\036\005\000\002\036\005\000\002\036\007\000" +
    "\002\036\011\000\002\036\010\000\002\036\005\000\002" +
    "\036\003\000\002\036\013\000\002\037\005\000\002\040" +
    "\007\000\002\040\006\000\002\041\007\000\002\042\006" +
    "\000\002\043\003\000\002\043\004\000\002\043\003\000" +
    "\002\043\002\000\002\044\006\000\002\044\003\000\002" +
    "\045\003\000\002\045\002\000\002\046\006\000\002\046" +
    "\007\000\002\046\003\000\002\047\005\000\002\047\002" +
    "\000\002\050\007\000\002\051\005\000\002\052\004\000" +
    "\002\052\003\000\002\052\004\000\002\052\004\000\002" +
    "\052\004\000\002\052\005\000\002\052\007\000\002\053" +
    "\005\000\002\054\004\000\002\054\003\000\002\054\004" +
    "\000\002\054\006\000\002\055\006\000\002\056\003\000" +
    "\002\056\003\000\002\056\004\000\002\056\003\000\002" +
    "\057\010\000\002\057\002\000\002\060\007\000\002\061" +
    "\007\000\002\062\004\000\002\063\007\000\002\064\003" +
    "\000\002\064\003\000\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f3\000\004\004\005\001\002\000\004\002\u01f5\001" +
    "\002\000\004\005\u01f1\001\002\000\130\012\066\015\054" +
    "\017\041\021\032\022\046\023\015\025\106\027\022\030" +
    "\034\031\067\033\051\035\075\036\036\037\035\040\052" +
    "\043\024\063\065\064\072\066\037\070\077\100\063\101" +
    "\110\107\047\110\045\125\104\127\016\130\021\141\073" +
    "\142\076\143\053\150\100\151\107\163\040\167\020\171" +
    "\023\173\027\174\105\175\042\176\043\200\064\205\112" +
    "\222\044\234\055\001\002\000\004\002\001\001\002\000" +
    "\006\002\ufffd\004\005\001\002\000\004\002\uffff\001\002" +
    "\000\006\002\ufffd\004\005\001\002\000\004\002\ufffe\001" +
    "\002\000\004\214\uffe5\001\002\000\004\005\u01eb\001\002" +
    "\000\004\027\u01e9\001\002\000\004\214\uffdd\001\002\000" +
    "\004\222\044\001\002\000\004\016\u01e3\001\002\000\004" +
    "\217\u01d0\001\002\000\004\217\u01cc\001\002\000\004\016" +
    "\u01c0\001\002\000\004\213\u01a6\001\002\000\004\214\uffdf" +
    "\001\002\000\004\211\u01bd\001\002\000\004\214\uffda\001" +
    "\002\000\004\214\uffd8\001\002\000\004\012\u01bc\001\002" +
    "\000\004\214\uffdc\001\002\000\004\015\u01b9\001\002\000" +
    "\010\036\u01b4\076\u01b5\112\u01b3\001\002\000\006\012\u01a1" +
    "\217\u01a2\001\002\000\004\067\u0194\001\002\000\004\164" +
    "\u0193\001\002\000\004\020\u0191\001\002\000\004\211\u018f" +
    "\001\002\000\004\211\u018b\001\002\000\142\012\uffe6\015" +
    "\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\043\uffe6\044\uffe6\063\uffe6\064\uffe6\066\uffe6\070\uffe6" +
    "\100\uffe6\101\uffe6\107\uffe6\110\uffe6\125\uffe6\127\uffe6\130" +
    "\uffe6\141\uffe6\142\uffe6\143\uffe6\150\uffe6\151\uffe6\163\uffe6" +
    "\171\uffe6\172\uffe6\173\uffe6\174\uffe6\175\uffe6\176\uffe6\200" +
    "\uffe6\205\uffe6\213\uffe6\214\uffe6\215\uffe6\220\uffe6\222\u0188" +
    "\234\uffe6\001\002\000\004\063\u0186\001\002\000\004\012" +
    "\u0185\001\002\000\004\211\u017f\001\002\000\132\010\uffec" +
    "\012\066\015\054\017\041\021\032\022\046\023\015\025" +
    "\106\027\022\030\034\031\067\033\051\035\075\036\036" +
    "\037\035\040\052\043\024\063\065\064\072\066\037\070" +
    "\077\100\063\101\110\107\047\110\045\125\104\127\016" +
    "\130\021\141\073\142\076\143\053\150\100\151\107\163" +
    "\040\167\020\171\023\173\027\174\105\175\042\176\043" +
    "\200\064\205\112\222\044\234\055\001\002\000\006\034" +
    "\u0178\065\u0179\001\002\000\004\213\u0174\001\002\000\004" +
    "\211\u016f\001\002\000\004\016\u016d\001\002\000\006\026" +
    "\322\212\323\001\002\000\004\213\306\001\002\000\124" +
    "\012\066\015\054\017\041\021\032\022\046\023\015\025" +
    "\106\027\022\030\034\031\067\033\051\035\075\036\036" +
    "\037\035\040\052\043\024\063\065\064\072\066\037\070" +
    "\077\100\063\101\110\107\047\110\045\125\104\127\016" +
    "\130\021\141\073\142\076\143\053\150\100\151\107\163" +
    "\040\171\023\173\027\174\105\175\042\176\043\200\064" +
    "\205\112\234\055\001\002\000\004\214\uffd9\001\002\000" +
    "\004\214\uffe2\001\002\000\004\214\uffe0\001\002\000\006" +
    "\063\302\133\301\001\002\000\004\211\275\001\002\000" +
    "\004\213\271\001\002\000\004\217\252\001\002\000\004" +
    "\032\250\001\002\000\004\214\uffe1\001\002\000\004\214" +
    "\uffe4\001\002\000\006\213\240\214\uff74\001\002\000\004" +
    "\217\225\001\002\000\004\010\201\001\002\000\004\012" +
    "\177\001\002\000\006\012\176\213\uff66\001\002\000\004" +
    "\217\160\001\002\000\004\214\uff55\001\002\000\004\214" +
    "\uffe3\001\002\000\004\214\uffdb\001\002\000\004\214\147" +
    "\001\002\000\010\032\140\075\137\100\141\001\002\000" +
    "\004\211\124\001\002\000\004\023\120\001\002\000\004" +
    "\012\117\001\002\000\004\234\115\001\002\000\004\214" +
    "\uffde\001\002\000\004\211\113\001\002\000\004\036\114" +
    "\001\002\000\004\213\uff6c\001\002\000\004\026\116\001" +
    "\002\000\004\213\uff6e\001\002\000\004\213\uff83\001\002" +
    "\000\004\005\121\001\002\000\004\024\122\001\002\000" +
    "\004\012\123\001\002\000\004\213\uff91\001\002\000\004" +
    "\036\125\001\002\000\006\213\126\214\uff53\001\002\000" +
    "\004\123\131\001\002\000\004\214\uff57\001\002\000\004" +
    "\215\136\001\002\000\004\211\132\001\002\000\004\234" +
    "\133\001\002\000\004\145\134\001\002\000\004\222\044" +
    "\001\002\000\004\215\uff52\001\002\000\004\214\uff54\001" +
    "\002\000\004\222\044\001\002\000\004\012\143\001\002" +
    "\000\004\012\142\001\002\000\004\213\uff84\001\002\000" +
    "\004\213\uff88\001\002\000\004\220\145\001\002\000\004" +
    "\222\044\001\002\000\004\214\uff56\001\002\000\004\234" +
    "\151\001\002\000\132\010\uffe9\012\uffe9\015\uffe9\017\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\025\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\033\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\043\uffe9" +
    "\063\uffe9\064\uffe9\066\uffe9\070\uffe9\100\uffe9\101\uffe9\107" +
    "\uffe9\110\uffe9\125\uffe9\127\uffe9\130\uffe9\141\uffe9\142\uffe9" +
    "\143\uffe9\150\uffe9\151\uffe9\163\uffe9\167\uffe9\171\uffe9\173" +
    "\uffe9\174\uffe9\175\uffe9\176\uffe9\200\uffe9\205\uffe9\222\uffe9" +
    "\234\uffe9\001\002\000\004\220\152\001\002\000\010\206" +
    "\153\207\154\210\156\001\002\000\004\216\uff39\001\002" +
    "\000\004\216\uff38\001\002\000\004\216\157\001\002\000" +
    "\004\216\uff37\001\002\000\132\010\uff3a\012\uff3a\015\uff3a" +
    "\017\uff3a\021\uff3a\022\uff3a\023\uff3a\025\uff3a\027\uff3a\030" +
    "\uff3a\031\uff3a\033\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a" +
    "\043\uff3a\063\uff3a\064\uff3a\066\uff3a\070\uff3a\100\uff3a\101" +
    "\uff3a\107\uff3a\110\uff3a\125\uff3a\127\uff3a\130\uff3a\141\uff3a" +
    "\142\uff3a\143\uff3a\150\uff3a\151\uff3a\163\uff3a\167\uff3a\171" +
    "\uff3a\173\uff3a\174\uff3a\175\uff3a\176\uff3a\200\uff3a\205\uff3a" +
    "\222\uff3a\234\uff3a\001\002\000\012\071\165\072\162\147" +
    "\161\151\164\001\002\000\006\213\uff40\214\uff40\001\002" +
    "\000\006\213\uff42\214\uff42\001\002\000\006\213\170\214" +
    "\uff3e\001\002\000\004\070\166\001\002\000\006\213\uff43" +
    "\214\uff43\001\002\000\006\213\uff41\214\uff41\001\002\000" +
    "\004\214\uff44\001\002\000\004\170\171\001\002\000\004" +
    "\234\172\001\002\000\004\072\173\001\002\000\004\234" +
    "\174\001\002\000\004\215\175\001\002\000\004\214\uff3f" +
    "\001\002\000\004\213\uff86\001\002\000\004\213\uff8c\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\004\005\202" +
    "\001\002\000\016\226\211\227\204\230\205\231\207\232" +
    "\210\233\203\001\002\000\006\006\ufff4\007\ufff4\001\002" +
    "\000\006\006\ufff8\007\ufff8\001\002\000\006\006\ufff7\007" +
    "\ufff7\001\002\000\006\006\214\007\212\001\002\000\006" +
    "\006\ufff6\007\ufff6\001\002\000\006\006\ufff5\007\ufff5\001" +
    "\002\000\006\006\ufff9\007\ufff9\001\002\000\004\213\ufff2" +
    "\001\002\000\004\213\216\001\002\000\004\213\ufff3\001" +
    "\002\000\006\002\ufffa\004\ufffa\001\002\000\004\223\217" +
    "\001\002\000\006\224\221\225\222\001\002\000\004\203" +
    "\223\001\002\000\004\203\ufff0\001\002\000\004\203\uffef" +
    "\001\002\000\004\215\224\001\002\000\134\002\ufff1\004" +
    "\ufff1\012\ufff1\015\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\025\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\043\ufff1\063\ufff1\064\ufff1\066\ufff1" +
    "\070\ufff1\100\ufff1\101\ufff1\107\ufff1\110\ufff1\125\ufff1\127" +
    "\ufff1\130\ufff1\141\ufff1\142\ufff1\143\ufff1\150\ufff1\151\ufff1" +
    "\163\ufff1\167\ufff1\171\ufff1\173\ufff1\174\ufff1\175\ufff1\176" +
    "\ufff1\200\ufff1\205\ufff1\222\ufff1\234\ufff1\001\002\000\012" +
    "\026\226\146\231\151\230\152\227\001\002\000\004\075" +
    "\237\001\002\000\004\214\uff47\001\002\000\004\141\236" +
    "\001\002\000\004\143\233\001\002\000\004\214\uff49\001" +
    "\002\000\004\144\234\001\002\000\004\234\235\001\002" +
    "\000\004\214\uff45\001\002\000\004\214\uff46\001\002\000" +
    "\004\214\uff48\001\002\000\004\205\241\001\002\000\004" +
    "\217\242\001\002\000\004\234\243\001\002\000\004\123" +
    "\244\001\002\000\004\217\245\001\002\000\004\234\246" +
    "\001\002\000\004\215\247\001\002\000\004\214\uff75\001" +
    "\002\000\004\012\251\001\002\000\004\213\uff8e\001\002" +
    "\000\022\013\254\015\253\017\255\021\260\035\257\142" +
    "\262\160\261\234\256\001\002\000\004\016\270\001\002" +
    "\000\004\014\267\001\002\000\004\020\266\001\002\000" +
    "\004\026\264\001\002\000\004\213\uff78\001\002\000\004" +
    "\213\uff7c\001\002\000\004\070\263\001\002\000\004\213" +
    "\uff7b\001\002\000\004\213\uff79\001\002\000\004\027\265" +
    "\001\002\000\004\213\uff7d\001\002\000\004\213\uff7e\001" +
    "\002\000\004\213\uff7f\001\002\000\004\213\uff7a\001\002" +
    "\000\004\234\272\001\002\000\004\122\273\001\002\000" +
    "\004\215\274\001\002\000\004\214\uff3d\001\002\000\004" +
    "\173\276\001\002\000\004\211\277\001\002\000\004\036" +
    "\300\001\002\000\004\213\uff6a\001\002\000\004\036\303" +
    "\001\002\000\004\213\uff6d\001\002\000\004\213\uff6b\001" +
    "\002\000\004\214\147\001\002\000\132\010\uffeb\012\uffeb" +
    "\015\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\033\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\043\uffeb\063\uffeb\064\uffeb\066\uffeb\070\uffeb\100" +
    "\uffeb\101\uffeb\107\uffeb\110\uffeb\125\uffeb\127\uffeb\130\uffeb" +
    "\141\uffeb\142\uffeb\143\uffeb\150\uffeb\151\uffeb\163\uffeb\167" +
    "\uffeb\171\uffeb\173\uffeb\174\uffeb\175\uffeb\176\uffeb\200\uffeb" +
    "\205\uffeb\222\uffeb\234\uffeb\001\002\000\006\173\311\174" +
    "\310\001\002\000\004\214\uff97\001\002\000\004\221\317" +
    "\001\002\000\004\234\312\001\002\000\004\211\313\001" +
    "\002\000\004\174\314\001\002\000\004\234\315\001\002" +
    "\000\004\215\316\001\002\000\004\214\uff77\001\002\000" +
    "\004\234\320\001\002\000\004\215\321\001\002\000\004" +
    "\214\uff76\001\002\000\004\027\u016b\001\002\000\050\025" +
    "\331\041\344\042\336\043\343\046\325\047\341\050\334" +
    "\051\335\052\327\053\342\054\345\055\324\056\330\060" +
    "\326\104\347\106\332\113\346\126\340\157\333\001\002" +
    "\000\004\102\u0168\001\002\000\004\013\u0167\001\002\000" +
    "\004\056\u0165\001\002\000\010\046\u015f\056\u015e\060\u0160" +
    "\001\002\000\006\013\u015d\217\uffc8\001\002\000\004\114" +
    "\u015a\001\002\000\004\107\u0155\001\002\000\006\043\u0152" +
    "\057\u0151\001\002\000\006\043\u014e\057\u014d\001\002\000" +
    "\004\013\u014c\001\002\000\024\043\u0137\046\u0136\051\u013b" +
    "\052\u0139\053\u0134\055\u0135\056\u0138\057\u013c\060\u013a\001" +
    "\002\000\004\217\u0127\001\002\000\004\043\u0125\001\002" +
    "\000\022\043\u0115\046\u0113\052\u010f\053\u0114\055\u0112\056" +
    "\u0110\057\u0111\060\u0116\001\002\000\006\013\u010d\057\u010c" +
    "\001\002\000\010\013\u0106\053\u0107\057\u0105\001\002\000" +
    "\004\013\u0104\001\002\000\014\043\373\053\372\057\367" +
    "\106\371\157\370\001\002\000\012\046\357\052\355\056" +
    "\356\060\360\001\002\000\004\105\350\001\002\000\006" +
    "\046\352\056\351\001\002\000\004\013\354\001\002\000" +
    "\004\013\353\001\002\000\004\217\uffc4\001\002\000\004" +
    "\217\uffc5\001\002\000\004\056\365\001\002\000\004\013" +
    "\364\001\002\000\004\013\363\001\002\000\004\056\361" +
    "\001\002\000\004\013\362\001\002\000\004\217\uffa6\001" +
    "\002\000\004\217\uffc1\001\002\000\004\217\uffc0\001\002" +
    "\000\004\013\366\001\002\000\004\217\uffa1\001\002\000" +
    "\006\013\u0101\053\u0102\001\002\000\004\013\u0100\001\002" +
    "\000\004\107\376\001\002\000\004\013\375\001\002\000" +
    "\004\013\374\001\002\000\004\217\uffbd\001\002\000\004" +
    "\217\uffca\001\002\000\004\013\377\001\002\000\004\217" +
    "\uffc2\001\002\000\004\217\uffa0\001\002\000\004\217\uffab" +
    "\001\002\000\004\013\u0103\001\002\000\004\217\uffa3\001" +
    "\002\000\004\217\uffd3\001\002\000\006\013\u0109\053\u010a" +
    "\001\002\000\004\217\uffd2\001\002\000\004\013\u0108\001" +
    "\002\000\004\217\uffb5\001\002\000\004\217\uffb7\001\002" +
    "\000\004\013\u010b\001\002\000\004\217\uffad\001\002\000" +
    "\004\013\u010e\001\002\000\004\217\uffcb\001\002\000\004" +
    "\217\uffc7\001\002\000\004\046\u0123\001\002\000\004\013" +
    "\u0122\001\002\000\006\013\u011f\053\u0120\001\002\000\004" +
    "\102\u011c\001\002\000\004\013\u011b\001\002\000\004\013" +
    "\u011a\001\002\000\004\013\u0119\001\002\000\004\056\u0117" +
    "\001\002\000\004\013\u0118\001\002\000\004\217\uffae\001" +
    "\002\000\004\217\uffb3\001\002\000\004\217\uffb1\001\002" +
    "\000\004\217\uffcf\001\002\000\004\046\u011d\001\002\000" +
    "\004\013\u011e\001\002\000\004\217\uffc9\001\002\000\004" +
    "\217\uffb0\001\002\000\004\013\u0121\001\002\000\004\217" +
    "\uffa2\001\002\000\004\217\uffb8\001\002\000\004\013\u0124" +
    "\001\002\000\004\217\uffcc\001\002\000\004\013\u0126\001" +
    "\002\000\004\217\uffb6\001\002\000\006\213\u0129\214\uff9b" +
    "\001\002\000\004\214\uffd4\001\002\000\004\234\u0131\001" +
    "\002\000\006\213\u012c\214\uff98\001\002\000\004\214\uff9c" +
    "\001\002\000\004\222\044\001\002\000\004\234\u012e\001" +
    "\002\000\004\124\u012f\001\002\000\004\215\u0130\001\002" +
    "\000\004\214\uff99\001\002\000\004\121\u0132\001\002\000" +
    "\004\215\u0133\001\002\000\006\213\uff9a\214\uff9a\001\002" +
    "\000\004\013\u014b\001\002\000\004\102\u0148\001\002\000" +
    "\004\013\u0147\001\002\000\004\013\u0146\001\002\000\004" +
    "\013\u0145\001\002\000\004\046\u0143\001\002\000\004\056" +
    "\u0141\001\002\000\004\013\u0140\001\002\000\006\013\u013d" +
    "\053\u013e\001\002\000\004\217\uffb4\001\002\000\004\013" +
    "\u013f\001\002\000\004\217\uffaa\001\002\000\004\217\uffa5" +
    "\001\002\000\004\013\u0142\001\002\000\004\217\uffa8\001" +
    "\002\000\004\013\u0144\001\002\000\004\217\uffa7\001\002" +
    "\000\004\217\uffaf\001\002\000\004\217\uffd1\001\002\000" +
    "\004\217\uffbc\001\002\000\004\046\u0149\001\002\000\004" +
    "\013\u014a\001\002\000\004\217\uffa9\001\002\000\004\217" +
    "\uffb2\001\002\000\004\217\uffcd\001\002\000\004\013\u0150" +
    "\001\002\000\004\013\u014f\001\002\000\004\217\uffce\001" +
    "\002\000\004\217\uffa4\001\002\000\004\013\u0154\001\002" +
    "\000\004\013\u0153\001\002\000\004\217\uff9f\001\002\000" +
    "\004\217\uff9e\001\002\000\006\057\u0156\115\u0157\001\002" +
    "\000\004\013\u0159\001\002\000\004\013\u0158\001\002\000" +
    "\004\217\uffc3\001\002\000\004\217\uffac\001\002\000\004" +
    "\043\u015b\001\002\000\004\013\u015c\001\002\000\004\217" +
    "\uffbf\001\002\000\004\217\uffb9\001\002\000\004\013\u0164" +
    "\001\002\000\004\013\u0163\001\002\000\004\056\u0161\001" +
    "\002\000\004\013\u0162\001\002\000\004\217\uffba\001\002" +
    "\000\004\217\uffbe\001\002\000\004\217\uff9d\001\002\000" +
    "\004\013\u0166\001\002\000\004\217\uffc6\001\002\000\004" +
    "\217\uffd0\001\002\000\004\046\u0169\001\002\000\004\013" +
    "\u016a\001\002\000\004\217\uffbb\001\002\000\004\012\u016c" +
    "\001\002\000\004\213\uff90\001\002\000\004\012\u016e\001" +
    "\002\000\004\213\uff96\001\002\000\004\036\u0170\001\002" +
    "\000\004\211\u0171\001\002\000\004\144\u0172\001\002\000" +
    "\004\234\u0173\001\002\000\004\213\uff68\001\002\000\004" +
    "\234\u0175\001\002\000\004\117\u0176\001\002\000\004\215" +
    "\u0177\001\002\000\004\214\uff3c\001\002\000\004\012\u017b" +
    "\001\002\000\004\012\u017a\001\002\000\004\213\uff82\001" +
    "\002\000\004\213\uff8d\001\002\000\132\010\uffec\012\066" +
    "\015\054\017\041\021\032\022\046\023\015\025\106\027" +
    "\022\030\034\031\067\033\051\035\075\036\036\037\035" +
    "\040\052\043\024\063\065\064\072\066\037\070\077\100" +
    "\063\101\110\107\047\110\045\125\104\127\016\130\021" +
    "\141\073\142\076\143\053\150\100\151\107\163\040\167" +
    "\020\171\023\173\027\174\105\175\042\176\043\200\064" +
    "\205\112\222\044\234\055\001\002\000\004\010\uffee\001" +
    "\002\000\004\010\uffed\001\002\000\004\136\u0180\001\002" +
    "\000\004\211\u0181\001\002\000\004\137\u0182\001\002\000" +
    "\004\211\u0183\001\002\000\004\036\u0184\001\002\000\004" +
    "\213\uff69\001\002\000\004\213\uff93\001\002\000\004\036" +
    "\u0187\001\002\000\004\213\uff67\001\002\000\142\012\uffe6" +
    "\015\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\043\uffe6\044\uffe6\063\uffe6\064\uffe6\066\uffe6\070" +
    "\uffe6\100\uffe6\101\uffe6\107\uffe6\110\uffe6\125\uffe6\127\uffe6" +
    "\130\uffe6\141\uffe6\142\uffe6\143\uffe6\150\uffe6\151\uffe6\163" +
    "\uffe6\171\uffe6\172\uffe6\173\uffe6\174\uffe6\175\uffe6\176\uffe6" +
    "\200\uffe6\205\uffe6\213\uffe6\214\uffe6\215\uffe6\220\uffe6\222" +
    "\u0188\234\uffe6\001\002\000\140\012\uffe8\015\uffe8\017\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\025\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\033\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\043\uffe8" +
    "\044\uffe8\063\uffe8\064\uffe8\066\uffe8\070\uffe8\100\uffe8\101" +
    "\uffe8\107\uffe8\110\uffe8\125\uffe8\127\uffe8\130\uffe8\141\uffe8" +
    "\142\uffe8\143\uffe8\150\uffe8\151\uffe8\163\uffe8\171\uffe8\172" +
    "\uffe8\173\uffe8\174\uffe8\175\uffe8\176\uffe8\200\uffe8\205\uffe8" +
    "\213\uffe8\214\uffe8\215\uffe8\220\uffe8\234\uffe8\001\002\000" +
    "\140\012\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\025\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\043\uffe7\044\uffe7\063\uffe7\064\uffe7" +
    "\066\uffe7\070\uffe7\100\uffe7\101\uffe7\107\uffe7\110\uffe7\125" +
    "\uffe7\127\uffe7\130\uffe7\141\uffe7\142\uffe7\143\uffe7\150\uffe7" +
    "\151\uffe7\163\uffe7\171\uffe7\172\uffe7\173\uffe7\174\uffe7\175" +
    "\uffe7\176\uffe7\200\uffe7\205\uffe7\213\uffe7\214\uffe7\215\uffe7" +
    "\220\uffe7\234\uffe7\001\002\000\004\177\u018c\001\002\000" +
    "\004\211\u018d\001\002\000\004\036\u018e\001\002\000\004" +
    "\213\uff72\001\002\000\004\036\u0190\001\002\000\004\213" +
    "\uff6f\001\002\000\004\012\u0192\001\002\000\004\213\uff95" +
    "\001\002\000\004\214\uff3b\001\002\000\016\075\u0196\134" +
    "\u0198\143\u0195\213\uff5c\214\uff5c\234\uff5c\001\002\000\010" +
    "\213\uff5f\214\uff5f\234\uff5f\001\002\000\010\213\uff5d\214" +
    "\uff5d\234\uff5d\001\002\000\010\213\u0129\214\uff58\234\u019a" +
    "\001\002\000\004\135\u0199\001\002\000\010\213\uff5e\214" +
    "\uff5e\234\uff5e\001\002\000\004\005\u019e\001\002\000\004" +
    "\214\uff59\001\002\000\004\214\uff60\001\002\000\004\214" +
    "\uff5a\001\002\000\004\234\u019f\001\002\000\006\213\u0129" +
    "\214\uff58\001\002\000\004\214\uff5b\001\002\000\004\213" +
    "\uff8b\001\002\000\004\125\u01a3\001\002\000\004\100\u01a4" +
    "\001\002\000\004\222\044\001\002\000\004\213\u01a6\001" +
    "\002\000\004\173\u01ac\001\002\000\004\220\u01a8\001\002" +
    "\000\004\222\044\001\002\000\004\213\u01a6\001\002\000" +
    "\004\213\uff65\001\002\000\004\215\u01b2\001\002\000\004" +
    "\234\u01ad\001\002\000\004\211\u01ae\001\002\000\006\174" +
    "\u01af\202\u01b0\001\002\000\004\234\u01b1\001\002\000\004" +
    "\215\uff62\001\002\000\004\215\uff63\001\002\000\010\213" +
    "\uff64\214\uff64\220\uff64\001\002\000\004\036\u01b8\001\002" +
    "\000\004\012\u01b7\001\002\000\004\012\u01b6\001\002\000" +
    "\004\213\uff8a\001\002\000\004\213\uff89\001\002\000\004" +
    "\213\uff70\001\002\000\004\016\u01ba\001\002\000\004\012" +
    "\u01bb\001\002\000\004\213\uff8f\001\002\000\004\213\uff94" +
    "\001\002\000\004\036\u01be\001\002\000\004\213\uff71\001" +
    "\002\000\004\214\uff73\001\002\000\006\027\u01c2\222\044" +
    "\001\002\000\004\044\u01c4\001\002\000\004\012\u01c3\001" +
    "\002\000\004\213\uff81\001\002\000\004\222\044\001\002" +
    "\000\006\213\u01c6\214\uffd5\001\002\000\004\051\u01c8\001" +
    "\002\000\004\214\uffd7\001\002\000\004\166\u01c9\001\002" +
    "\000\004\222\044\001\002\000\004\215\u01cb\001\002\000" +
    "\004\214\uffd6\001\002\000\004\222\044\001\002\000\004" +
    "\172\u01ce\001\002\000\004\222\044\001\002\000\004\214" +
    "\uff61\001\002\000\020\043\u01d8\111\u01d7\125\u01d1\127\u01d3" +
    "\130\u01d5\131\u01d2\234\u01d4\001\002\000\004\127\u01e2\001" +
    "\002\000\004\005\u01e0\001\002\000\004\214\uff4f\001\002" +
    "\000\004\145\u01dc\001\002\000\004\016\u01db\001\002\000" +
    "\004\214\uff51\001\002\000\004\076\u01da\001\002\000\004" +
    "\016\u01d9\001\002\000\004\214\uff4d\001\002\000\004\214" +
    "\uff50\001\002\000\004\214\uff4e\001\002\000\004\142\u01dd" +
    "\001\002\000\004\012\u01de\001\002\000\004\217\u01df\001" +
    "\002\000\004\214\uff4a\001\002\000\004\132\u01e1\001\002" +
    "\000\004\214\uff4b\001\002\000\004\214\uff4c\001\002\000" +
    "\004\027\u01e4\001\002\000\004\012\u01e5\001\002\000\004" +
    "\213\uff85\001\002\000\124\012\066\015\054\017\041\021" +
    "\032\022\046\023\015\025\106\027\022\030\034\031\067" +
    "\033\051\035\075\036\036\037\035\040\052\043\024\063" +
    "\065\064\072\066\037\070\077\100\063\101\110\107\047" +
    "\110\045\125\104\127\016\130\021\141\073\142\076\143" +
    "\053\150\100\151\107\163\040\171\023\173\027\174\105" +
    "\175\042\176\043\200\064\205\112\234\055\001\002\000" +
    "\004\214\147\001\002\000\132\010\uffea\012\uffea\015\uffea" +
    "\017\uffea\021\uffea\022\uffea\023\uffea\025\uffea\027\uffea\030" +
    "\uffea\031\uffea\033\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\043\uffea\063\uffea\064\uffea\066\uffea\070\uffea\100\uffea\101" +
    "\uffea\107\uffea\110\uffea\125\uffea\127\uffea\130\uffea\141\uffea" +
    "\142\uffea\143\uffea\150\uffea\151\uffea\163\uffea\167\uffea\171" +
    "\uffea\173\uffea\174\uffea\175\uffea\176\uffea\200\uffea\205\uffea" +
    "\222\uffea\234\uffea\001\002\000\004\012\u01ea\001\002\000" +
    "\004\213\uff87\001\002\000\004\024\u01ec\001\002\000\006" +
    "\012\u01ee\015\u01ed\001\002\000\004\016\u01ef\001\002\000" +
    "\004\213\uff80\001\002\000\004\012\u01f0\001\002\000\004" +
    "\213\uff92\001\002\000\016\226\211\227\204\230\205\231" +
    "\207\232\210\233\203\001\002\000\006\006\214\007\212" +
    "\001\002\000\004\213\216\001\002\000\130\012\ufffb\015" +
    "\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\025\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\033\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\043\ufffb\063\ufffb\064\ufffb\066\ufffb\070\ufffb\100\ufffb" +
    "\101\ufffb\107\ufffb\110\ufffb\125\ufffb\127\ufffb\130\ufffb\141" +
    "\ufffb\142\ufffb\143\ufffb\150\ufffb\151\ufffb\163\ufffb\167\ufffb" +
    "\171\ufffb\173\ufffb\174\ufffb\175\ufffb\176\ufffb\200\ufffb\205" +
    "\ufffb\222\ufffb\234\ufffb\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f3\000\012\002\003\003\006\005\007\006\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\014\073" +
    "\016\047\017\056\021\102\022\013\024\070\031\100\032" +
    "\055\034\060\035\067\036\024\041\061\042\025\046\110" +
    "\051\016\053\032\055\101\060\027\061\057\062\030\001" +
    "\001\000\002\001\001\000\010\004\010\005\011\006\005" +
    "\001\001\000\002\001\001\000\010\004\012\005\011\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u01e5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u01be\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0188\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\015\u017c\016" +
    "\u017b\017\056\021\102\022\013\024\070\031\100\032\055" +
    "\034\060\035\067\036\024\041\061\042\025\046\110\051" +
    "\016\053\032\055\101\060\027\061\057\062\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\306\001\001" +
    "\000\044\021\303\022\013\024\070\031\100\032\055\034" +
    "\060\035\067\036\024\041\061\042\025\046\110\051\016" +
    "\053\032\055\101\060\027\061\057\062\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\126\001" +
    "\001\000\004\050\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\u0127\027\u0129" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\u012a\001\001\000\002\001\001\000\004\017\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\015\u017d\016\u017b\017\056\021" +
    "\102\022\013\024\070\031\100\032\055\034\060\035\067" +
    "\036\024\041\061\042\025\046\110\051\016\053\032\055" +
    "\101\060\027\061\057\062\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0189\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\u0196\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\u019a\044\u019b\045\u019c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\u019a\045\u019f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u01a4\001\001\000\004\037\u01a6\001\001\000\004\040\u01aa" +
    "\001\001\000\002\001\001\000\004\017\u01a8\001\001\000" +
    "\004\037\u01a9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u01c0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u01c4\001\001" +
    "\000\004\023\u01c6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u01c9\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u01cc\001\001\000" +
    "\002\001\001\000\004\017\u01ce\001\001\000\002\001\001" +
    "\000\004\052\u01d5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\021\u01e6\022\013\024\070\031\100\032\055\034\060" +
    "\035\067\036\024\041\061\042\025\046\110\051\016\053" +
    "\032\055\101\060\027\061\057\062\030\001\001\000\004" +
    "\063\u01e7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01f1\001\001\000\004\011\u01f2\001\001" +
    "\000\004\012\u01f3\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // play_role ::= NEUTRAL 
            {
              PlayRole RESULT =null;
		 RESULT = PlayRole.NEUTRAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_role",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // play_role ::= AWAY_TEAM 
            {
              PlayRole RESULT =null;
		 RESULT = PlayRole.AWAY; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_role",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // play_role ::= HOME_TEAM 
            {
              PlayRole RESULT =null;
		 RESULT = PlayRole.HOME; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_role",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // context_info ::= LEFT_CURLY NUMBER COMMA play_role RIGHT_CURLY 
            {
              ContextInfo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlayRole pr = (PlayRole)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ContextInfo(n, pr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("context_info",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // review ::= SUPPORT_LITERAL RULING_LITERAL 
            {
              Review RESULT =null;
		 RESULT = new Review(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("review",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // steal ::= STEAL_LITERAL LEFT_PAREN NUMBER STEAL RIGHT_PAREN 
            {
              Steal RESULT =null;
		 RESULT = new Steal(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("steal",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // block ::= BLOCK_LITERAL LEFT_PAREN NUMBER BLOCK RIGHT_PAREN 
            {
              Block RESULT =null;
		 RESULT = new Block(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // timeout_ending ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_ending",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // timeout_ending ::= LEFT_PAREN FULL_LITERAL NUMBER SHORT_LITERAL NUMBER RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_ending",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // timeout_type ::= OFFICIAL_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Offical"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // timeout_type ::= NO_LITERAL TIMEOUT_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "No Timeout"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // timeout_type ::= SHORT_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // timeout_type ::= REGULAR_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Regular"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // timeout ::= TIMEOUT_LITERAL COLON timeout_type timeout_ending 
            {
              Timeout RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Timeout(tt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ejection_ending ::= FIRST_LITERAL FLAGRANT_LITERAL TYPE_LITERAL NUMBER 
            {
              EjectionEnding RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FlagrantEjectionEnding(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ejection_ending ::= NO_LITERAL EJECTION_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("No Ejection"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ejection_ending ::= OTHER_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("Other"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ejection_ending ::= SECOND_LITERAL TECHNICAL_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("Second Technical"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ejection ::= EJECTION_LITERAL COLON ejection_ending 
            {
              Ejection RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EjectionEnding e = (EjectionEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ejection(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // violation_type ::= NUMBER SEC_LITERAL INBOUND_LITERAL TURNOVER_LITERAL COLON 
            {
              ViolationType RESULT =null;
		 RESULT = new FiveSecInboundViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // violation_type ::= DELAY_LITERAL OF_LITERAL GAME_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DelayGameViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // violation_type ::= DOUBLE_LITERAL LANE_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DoubleLaneViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // violation_type ::= JUMP_LITERAL BALL_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new JumpBallViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // violation_type ::= KICKED_LITERAL BALL_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new KickedBallViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // violation_type ::= LANE_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new LaneViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // violation_type ::= DEFENSIVE_LITERAL GOALTENDING_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DefGTViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // violation ::= VIOLATION_LITERAL COLON violation_type 
            {
              Violation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ViolationType v = (ViolationType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Violation(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // technical_foul_type ::= DEF PERIOD NUMBER SEC_LITERAL player_statement 
            {
              TechnicalFoulType RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ThreeSecTechnical(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical_foul_type",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // technical_predicate ::= 
            {
              TechnicalPredicate RESULT =null;
		 RESULT = new TechnicalPredicate(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical_predicate",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // technical_predicate ::= LEFT_PAREN technical_foul_type RIGHT_PAREN 
            {
              TechnicalPredicate RESULT =null;
		int tftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TechnicalFoulType tft = (TechnicalFoulType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TechnicalPredicate(tft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical_predicate",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // technical ::= TAUNTING_LITERAL 
            {
              Technical RESULT =null;
		 RESULT = new TauntingTechnical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // technical ::= DOUBLE_LITERAL TECHNICAL_LITERAL player_statement COMMA player_statement 
            {
              Technical RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DoubleTechnical(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // technical ::= T_LITERAL PERIOD FOUL_LITERAL technical_predicate 
            {
              Technical RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TechnicalPredicate tp = (TechnicalPredicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Technical(tp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // free_throw_outcome ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_outcome",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // free_throw_outcome ::= point_total 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_outcome",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // free_throw_predicate ::= free_throw_outcome 
            {
              FreeThrowPredicate RESULT =null;
		 RESULT = new FreeThrowPredicate(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // free_throw_predicate ::= NUMBER OF_LITERAL NUMBER free_throw_outcome 
            {
              FreeThrowPredicate RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FreeThrowPredicate(n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_predicate",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // free_throw_type ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // free_throw_type ::= TECHNICAL_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Technical"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // free_throw_type ::= CLEAR_LITERAL PATH_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Clear Path"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // free_throw_type ::= FLAGRANT_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Flagrant"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // free_throw ::= FREE_LITERAL THROW_LITERAL free_throw_type free_throw_predicate 
            {
              FreeThrow RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FreeThrowPredicate p = (FreeThrowPredicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FreeThrow(t, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // substitution ::= SUBSTITUTION COLON player_statement FOR_LITERAL player_statement 
            {
              Substitution RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Substitution(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("substitution",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // foul_total_mid ::= P_LITERAL NUMBER PERIOD PENALTY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total_mid",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // foul_total_mid ::= P_LITERAL NUMBER PERIOD T_LITERAL NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total_mid",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // foul_total ::= LEFT_PAREN foul_total_mid RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // foul_type ::= FOUL_LITERAL COLON DOUBLE_LITERAL PERSONAL_LITERAL player_statement foul_total COMMA player_statement foul_total 
            {
              FoulType RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoublePersonalFoul(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // foul_type ::= INBOUND_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new InboundFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // foul_type ::= SHOOTING_LITERAL BLOCK_LITERAL FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new ShootingBlockFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // foul_type ::= FLAGRANT_LITERAL PERIOD FOUL_LITERAL PERIOD TYPE_LITERAL NUMBER 
            {
              FoulType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FlagrantFoulType(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // foul_type ::= AWAY_LITERAL PERIOD FROM_LITERAL PERIOD PLAY_LITERAL PERIOD FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new AwayFromPlayFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // foul_type ::= C_LITERAL PERIOD P_LITERAL PERIOD FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new ClearPathFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // foul_type ::= PERSONAL_LITERAL TAKE_LITERAL FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalTakeFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // foul_type ::= OFF_LITERAL PERIOD FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new OffensiveFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // foul_type ::= PERSONAL_LITERAL BLOCK_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalBlockFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // foul_type ::= DEFENSE_LITERAL NUMBER SECOND_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new DefenseThreeSecFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // foul_type ::= S_LITERAL PERIOD FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new ShootingFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // foul_type ::= OFFENSIVE_LITERAL CHARGE_LITERAL FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new OffensiveChargeFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // foul_type ::= P_LITERAL PERIOD FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // foul_type ::= L_LITERAL PERIOD B_LITERAL PERIOD FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new LooseBallFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // foul ::= foul_type foul_total 
            {
              Foul RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FoulType f = (FoulType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Foul(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // rebound ::= REBOUND_LITERAL 
            {
              Rebound RESULT =null;
		 RESULT = new Rebound(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rebound",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // rebound ::= REBOUND_LITERAL LEFT_PAREN OFF_LITERAL COLON NUMBER DEF COLON NUMBER RIGHT_PAREN 
            {
              Rebound RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Rebound(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rebound",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // turnover_ending ::= LEFT_PAREN T_LITERAL POUND_SIGN NUMBER RIGHT_PAREN 
            {
              TurnoverEnding RESULT =null;
		 RESULT = new TeamTurnover(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_ending",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // turnover_ending ::= LEFT_PAREN P_LITERAL NUMBER PERIOD T_LITERAL NUMBER RIGHT_PAREN 
            {
              TurnoverEnding RESULT =null;
		 RESULT = new PlayerTurnover(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_ending",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // turnover_type ::= TURNOVER_LITERAL COLON BACKCOURT_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BackcourtTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // turnover_type ::= TURNOVER_LITERAL COLON EXCESS_LITERAL TIMEOUT_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new ExcessTimeoutTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // turnover_type ::= TURNOVER_LITERAL COLON LOST_LITERAL BALL_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // turnover_type ::= TURNOVER_LITERAL COLON INBOUND_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new InboundTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // turnover_type ::= TURNOVER_LITERAL COLON TRAVELING_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new TravelingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // turnover_type ::= TURNOVER_LITERAL COLON NUMBER SECOND_LITERAL VIOLATION_LITERAL 
            {
              TurnoverType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new SecViolationTO(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // turnover_type ::= TURNOVER_LITERAL COLON BAD_LITERAL PASS_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BadPassTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // turnover_type ::= TURNOVER_LITERAL COLON SHOT_LITERAL CLOCK_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new ShotClockTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // turnover_type ::= OUT_LITERAL OF_LITERAL BOUNDS_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OOBTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // turnover_type ::= JUMP_LITERAL BALL_LITERAL VIOLATION_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new JumpBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // turnover_type ::= ILLEGAL_LITERAL ASSIST_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new IllegalAssistTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // turnover_type ::= NO_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new NoTurnoverTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // turnover_type ::= DOUBLE_LITERAL PERSONAL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DoublePersonalTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // turnover_type ::= KICKED_LITERAL BALL_LITERAL VIOLATION_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new KickedBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // turnover_type ::= INBOUND_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new InboundTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // turnover_type ::= LANE_LITERAL VIOLATION_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LaneViolationTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // turnover_type ::= DOUBLE_LITERAL DRIBBLE_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DoubleDribbleTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // turnover_type ::= OFFENSIVE_LITERAL FOUL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OffensiveFoulTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // turnover_type ::= OFFENSIVE_LITERAL GOALTENDING_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OffensiveGoaltendingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // turnover_type ::= FOUL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new FoulTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // turnover_type ::= BACKCOURT_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BackcourtTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // turnover_type ::= ILLEGAL_LITERAL SCREEN_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new IllegalScreenTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // turnover_type ::= DISCONTINUE_LITERAL DRIBBLE_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DiscontinueDribbleTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // turnover_type ::= POSS_LITERAL LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new PossLostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // turnover_type ::= NUMBER SECOND_LITERAL VIOLATION_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new SecViolationTO(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // turnover_type ::= STEP_LITERAL OUT_LITERAL OF_LITERAL BOUNDS_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new StepOOBTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // turnover_type ::= OUT_LITERAL OF_LITERAL BOUNDS_LITERAL LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OOBLostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // turnover_type ::= PALMING_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new PalmingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // turnover_type ::= TRAVELING_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new TravelingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // turnover_type ::= BAD_LITERAL PASS_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BadPassTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // turnover_type ::= LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // turnover ::= turnover_type turnover_ending 
            {
              Turnover RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TurnoverType tt = (TurnoverType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TurnoverEnding te = (TurnoverEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Turnover(tt,te); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assist_statement ::= 
            {
              Assist RESULT =null;
		 RESULT = new Assist(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assist_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assist_statement ::= LEFT_PAREN player_statement NUMBER ASSIST RIGHT_PAREN 
            {
              Assist RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Assist(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assist_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // point_total ::= LEFT_PAREN NUMBER POINTS RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("point_total",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // shot_ending ::= 
            {
              ShotEnding RESULT =null;
		 RESULT = new ShotEnding(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_ending",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // shot_ending ::= point_total assist_statement 
            {
              ShotEnding RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assist a = (Assist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShotEnding(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_ending",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // shot_type ::= REVERSE_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // shot_type ::= FADEAWAY_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fadeaway Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // shot_type ::= FADEAWAY_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fadeaway Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // shot_type ::= TURNAROUND_LITERAL FADEAWAY_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Fadeaway Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // shot_type ::= PUTBACK_LITERAL REVERSE_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Reverse Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // shot_type ::= DRIVING_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // shot_type ::= TURNAROUND_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // shot_type ::= PULLUP_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Pullup Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // shot_type ::= RUNNING_LITERAL TIP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Tip Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // shot_type ::= PUTBACK_LITERAL SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // shot_type ::= RUNNING_LITERAL REVERSE_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Reverse Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // shot_type ::= RUNNING_LITERAL SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // shot_type ::= RUNNING_LITERAL FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Finger Roll Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // shot_type ::= RUNNING_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // shot_type ::= TURNAROUND_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // shot_type ::= FADE_LITERAL AWAY_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fade Away Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // shot_type ::= JUMP_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // shot_type ::= DRIVING_LITERAL SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // shot_type ::= RUNNING_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // shot_type ::= DRIVING_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // shot_type ::= DRIVING_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // shot_type ::= RUNNING_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // shot_type ::= DRIVING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // shot_type ::= RUNNING_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // shot_type ::= JUMP_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // shot_type ::= FLOATING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Floating Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // shot_type ::= JUMP_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // shot_type ::= DRIVING_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // shot_type ::= DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // shot_type ::= REVERSE_LITERAL SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // shot_type ::= FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Finger Roll Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // shot_type ::= RUNNING_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // shot_type ::= TURNAROUND_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // shot_type ::= REVERSE_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // shot_type ::= STEP_LITERAL BACK_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Step Back Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // shot_type ::= PUTBACK_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // shot_type ::= PUTBACK_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // shot_type ::= TURNAROUND_LITERAL FADE_LITERAL AWAY_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Fade Away Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // shot_type ::= FADE_LITERAL AWAY_LITERAL JUMPER_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fade Away Jumper Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // shot_type ::= ALLEY_LITERAL OOP_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Alley Oop Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // shot_type ::= ALLEY_LITERAL OOP_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Alley Oop Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // shot_type ::= SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // shot_type ::= HOOK_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Hook Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // shot_type ::= DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // shot_type ::= DRIVING_LITERAL FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Finger Roll Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // shot_type ::= TURNAROUND_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // shot_type ::= HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // shot_type ::= DRIVING_LITERAL REVERSE_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Reverse Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // shot_type ::= TIP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Tip Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // shot_type ::= PULLUP_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Pullup Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // shot_type ::= DRIVING_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // shot_type ::= LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // shot_type ::= RUNNING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // shot_type ::= JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // shot_type ::= THREEPT_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // shot ::= NUMBER SINGLE_QUOTE shot_type COLON shot_ending 
            {
              Shot RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ShotType t = (ShotType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ShotEnding o = (ShotEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Shot(t, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // jump_ball_ending ::= 
            {
              JumpBallEnding RESULT =null;
		 RESULT = new JumpBallEnding(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_ending",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // jump_ball_ending ::= LEFT_PAREN TIP_LITERAL TO_LITERAL player_statement RIGHT_PAREN 
            {
              JumpBallEnding RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JumpBallEnding(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_ending",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // jump_ball ::= JUMP_LITERAL BALL_LITERAL player_statement VS_LITERAL player_statement jump_ball_ending 
            {
              JumpBall RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JumpBallEnding e = (JumpBallEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JumpBall(p1, p2, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // play_type ::= review 
            {
              PlayType RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Review rv = (Review)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // play_type ::= steal 
            {
              PlayType RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Steal stl = (Steal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // play_type ::= block 
            {
              PlayType RESULT =null;
		int blkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block blk = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = blk; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // play_type ::= timeout 
            {
              PlayType RESULT =null;
		int timeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Timeout time = (Timeout)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = time; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // play_type ::= ejection 
            {
              PlayType RESULT =null;
		int ejleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ejright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ejection ej = (Ejection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ej; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // play_type ::= violation 
            {
              PlayType RESULT =null;
		int violeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Violation vio = (Violation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vio; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // play_type ::= technical 
            {
              PlayType RESULT =null;
		int techleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int techright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Technical tech = (Technical)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tech; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // play_type ::= free_throw 
            {
              PlayType RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FreeThrow ft = (FreeThrow)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ft; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // play_type ::= substitution 
            {
              PlayType RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Substitution sub = (Substitution)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sub; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // play_type ::= foul 
            {
              PlayType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Foul f = (Foul)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // play_type ::= rebound 
            {
              PlayType RESULT =null;
		int rbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Rebound rb = (Rebound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // play_type ::= turnover 
            {
              PlayType RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Turnover to = (Turnover)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = to; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // play_type ::= shot 
            {
              PlayType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Shot s = (Shot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // play_type ::= jump_ball 
            {
              PlayType RESULT =null;
		int jbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JumpBall jb = (JumpBall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = jb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // player_statement_p ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement_p",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // player_statement_p ::= PLAYER_NAME player_statement_p 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s1 + " " + s2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement_p",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // player_statement ::= PLAYER_NAME player_statement_p 
            {
              Player RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Player(s1 + " " + s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // play ::= play_type context_info 
            {
              Play RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlayType pt = (PlayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ContextInfo ci = (ContextInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Play(pt, ci); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // play ::= MISS_LITERAL player_statement play_type context_info 
            {
              Play RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player ps = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlayType pt = (PlayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ContextInfo ci = (ContextInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MissedPlay(pt, ci, ps); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // play ::= player_statement play_type context_info 
            {
              Play RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player ps = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlayType pt = (PlayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ContextInfo ci = (ContextInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayerPlay(pt, ci, ps); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // plays_p ::= 
            {
              ArrayList<Play> RESULT =null;
		 RESULT = new ArrayList<Play>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays_p",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // plays_p ::= play plays_p 
            {
              ArrayList<Play> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Play p1 = (Play)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Play> p2 = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Play> playList = new ArrayList<Play>();
				   playList.add(p1);
                                   playList.addAll(p2);
                                   RESULT = playList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays_p",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // plays ::= play plays_p 
            {
              ArrayList<Play> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Play p1 = (Play)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Play> p2 = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Play> playList = new ArrayList<Play>();
				   playList.add(p1);
                                   playList.addAll(p2);
                                   RESULT = playList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // part_of_day ::= AM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_of_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // part_of_day ::= PM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_of_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // real_time ::= LEFT_PAREN TIME part_of_day EST RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("real_time",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // period_type ::= OVERTIME 
            {
              String RESULT =null;
		 RESULT = "Overtime"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // period_type ::= PERIOD_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Period"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // period_identifier ::= SIXTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // period_identifier ::= FIFTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // period_identifier ::= FOURTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // period_identifier ::= THIRD 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // period_identifier ::= SECOND 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // period_identifier ::= FIRST 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // end_of_period ::= END_LITERAL OF_LITERAL period_identifier period_type real_time 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_of_period",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // start_of_period ::= START_LITERAL OF_LITERAL period_identifier period_type real_time 
            {
              PeriodIdentification RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PeriodIdentification(s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_of_period",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // period ::= start_of_period plays end_of_period 
            {
              Period RESULT =null;
		int pi1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pi1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PeriodIdentification pi1 = (PeriodIdentification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Play> pl = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Period(pi1, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // periods_p ::= 
            {
              ArrayList<Period> RESULT =null;
		 RESULT = new ArrayList<Period>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // periods_p ::= period periods_p 
            {
              ArrayList<Period> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Period p1 = (Period)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p2 = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Period> periodList = new ArrayList<Period>();
				   periodList.add(p1);
                                   periodList.addAll(p2);
                                   RESULT = periodList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // periods ::= period periods_p 
            {
              ArrayList<Period> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Period p1 = (Period)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p2 = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Period> periodList = new ArrayList<Period>();
				   periodList.add(p1);
                                   periodList.addAll(p2);
                                   RESULT = periodList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= game EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Game start_val = (Game)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // game ::= periods 
            {
              Game RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Game(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("game",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

