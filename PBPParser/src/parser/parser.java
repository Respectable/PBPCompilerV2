
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 29 17:10:14 CDT 2013
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import nba.*;
import nba.play.*;
import nba.playType.*;
import nba.playType.block.*;
import nba.playType.ejection.*;
import nba.playType.foul.*;
import nba.playType.freeThrow.*;
import nba.playType.jumpBall.*;
import nba.playType.rebound.*;
import nba.playType.review.*;
import nba.playType.shot.*;
import nba.playType.steal.*;
import nba.playType.substitution.*;
import nba.playType.technical.*;
import nba.playType.timeout.*;
import nba.playType.turnover.*;
import nba.playType.violation.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 29 17:10:14 CDT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\363\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\006\010\000\002\006\005\000\002\007\010\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\007\000\002\013\003" +
    "\000\002\013\003\000\002\014\004\000\002\015\004\000" +
    "\002\015\002\000\002\016\005\000\002\016\006\000\002" +
    "\016\004\000\002\017\004\000\002\020\004\000\002\020" +
    "\002\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\010\000\002\023\006" +
    "\000\002\023\002\000\002\024\003\000\002\024\002\000" +
    "\002\025\006\000\002\025\004\000\002\026\004\000\002" +
    "\026\005\000\002\026\006\000\002\026\006\000\002\026" +
    "\007\000\002\026\005\000\002\026\006\000\002\026\006" +
    "\000\002\026\006\000\002\026\006\000\002\026\005\000" +
    "\002\026\006\000\002\026\005\000\002\026\005\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\026" +
    "\004\000\002\026\005\000\002\026\003\000\002\026\004" +
    "\000\002\026\005\000\002\026\004\000\002\026\005\000" +
    "\002\026\004\000\002\026\005\000\002\026\006\000\002" +
    "\026\003\000\002\026\005\000\002\026\004\000\002\026" +
    "\005\000\002\026\005\000\002\026\006\000\002\026\006" +
    "\000\002\026\004\000\002\026\004\000\002\026\006\000" +
    "\002\026\004\000\002\026\005\000\002\026\004\000\002" +
    "\026\005\000\002\026\005\000\002\026\004\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\004\000\002\026\005\000\002" +
    "\026\006\000\002\026\006\000\002\026\005\000\002\026" +
    "\006\000\002\026\006\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\006\000\002\026\006\000\002\026\005\000\002" +
    "\026\004\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\004\000\002\026\004\000\002\027\004" +
    "\000\002\027\002\000\002\030\006\000\002\031\007\000" +
    "\002\031\002\000\002\032\004\000\002\033\005\000\002" +
    "\033\005\000\002\033\004\000\002\033\004\000\002\033" +
    "\010\000\002\033\007\000\002\033\006\000\002\033\006" +
    "\000\002\033\005\000\002\033\005\000\002\033\004\000" +
    "\002\033\004\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\004\000\002\033" +
    "\006\000\002\033\005\000\002\033\004\000\002\033\005" +
    "\000\002\033\006\000\002\033\006\000\002\033\005\000" +
    "\002\033\005\000\002\033\006\000\002\033\006\000\002" +
    "\033\007\000\002\033\005\000\002\033\007\000\002\033" +
    "\005\000\002\033\006\000\002\033\006\000\002\033\005" +
    "\000\002\033\004\000\002\034\011\000\002\034\007\000" +
    "\002\035\013\000\002\035\003\000\002\036\004\000\002" +
    "\036\014\000\002\036\013\000\002\037\003\000\002\037" +
    "\003\000\002\037\005\000\002\037\003\000\002\037\005" +
    "\000\002\037\004\000\002\037\005\000\002\037\003\000" +
    "\002\037\005\000\002\037\003\000\002\037\003\000\002" +
    "\037\004\000\002\037\005\000\002\037\003\000\002\037" +
    "\003\000\002\040\005\000\002\041\007\000\002\041\006" +
    "\000\002\041\004\000\002\041\004\000\002\042\007\000" +
    "\002\043\006\000\002\044\003\000\002\044\004\000\002" +
    "\044\003\000\002\044\002\000\002\045\006\000\002\045" +
    "\003\000\002\046\003\000\002\046\002\000\002\047\004" +
    "\000\002\047\010\000\002\047\004\000\002\047\005\000" +
    "\002\047\004\000\002\047\003\000\002\050\005\000\002" +
    "\050\011\000\002\050\010\000\002\050\002\000\002\051" +
    "\006\000\002\052\005\000\002\053\004\000\002\053\003" +
    "\000\002\053\004\000\002\053\004\000\002\053\004\000" +
    "\002\053\006\000\002\053\007\000\002\053\004\000\002" +
    "\054\005\000\002\055\004\000\002\055\003\000\002\055" +
    "\004\000\002\055\006\000\002\056\006\000\002\057\003" +
    "\000\002\057\003\000\002\057\004\000\002\057\003\000" +
    "\002\060\010\000\002\060\010\000\002\060\002\000\002" +
    "\061\007\000\002\062\007\000\002\063\004\000\002\063" +
    "\007\000\002\063\004\000\002\063\004\000\002\064\007" +
    "\000\002\065\003\000\002\065\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u021c\000\014\004\005\161\011\163\007\212\012\214" +
    "\013\001\002\000\210\012\146\015\117\017\173\021\176" +
    "\022\112\023\110\025\150\027\067\030\163\031\175\033" +
    "\130\035\124\036\105\037\205\040\122\041\077\042\157" +
    "\043\073\046\111\047\202\050\123\051\171\052\070\053" +
    "\204\054\125\055\210\056\167\060\201\063\200\064\075" +
    "\066\144\070\135\100\074\101\151\104\174\106\116\110" +
    "\153\113\113\125\107\126\104\127\072\130\143\141\162" +
    "\142\212\150\141\151\203\153\177\157\152\161\011\163" +
    "\007\167\154\171\101\173\207\174\161\175\103\176\166" +
    "\177\140\200\160\201\115\202\127\203\134\204\126\212" +
    "\012\214\013\215\120\233\137\245\132\001\002\000\004" +
    "\005\062\001\002\000\016\002\ufffd\004\005\161\011\163" +
    "\007\212\012\214\013\001\002\000\004\164\056\001\002" +
    "\000\004\002\001\001\002\000\004\162\033\001\002\000" +
    "\004\164\032\001\002\000\004\164\031\001\002\000\004" +
    "\002\030\001\002\000\004\225\017\001\002\000\014\004" +
    "\005\161\011\163\007\212\012\214\013\001\002\000\004" +
    "\245\020\001\002\000\004\231\021\001\002\000\010\216" +
    "\022\217\023\220\025\001\002\000\004\227\uff11\001\002" +
    "\000\004\227\uff10\001\002\000\004\227\026\001\002\000" +
    "\004\227\uff0f\001\002\000\216\002\uff12\004\uff12\010\uff12" +
    "\012\uff12\015\uff12\017\uff12\021\uff12\022\uff12\023\uff12\025" +
    "\uff12\027\uff12\030\uff12\031\uff12\033\uff12\035\uff12\036\uff12" +
    "\037\uff12\040\uff12\041\uff12\042\uff12\043\uff12\046\uff12\047" +
    "\uff12\050\uff12\051\uff12\052\uff12\053\uff12\054\uff12\055\uff12" +
    "\056\uff12\060\uff12\063\uff12\064\uff12\066\uff12\070\uff12\100" +
    "\uff12\101\uff12\104\uff12\106\uff12\110\uff12\113\uff12\125\uff12" +
    "\126\uff12\127\uff12\130\uff12\141\uff12\142\uff12\150\uff12\151" +
    "\uff12\153\uff12\157\uff12\161\uff12\163\uff12\167\uff12\171\uff12" +
    "\173\uff12\174\uff12\175\uff12\176\uff12\177\uff12\200\uff12\201" +
    "\uff12\202\uff12\203\uff12\204\uff12\212\uff12\214\uff12\215\uff12" +
    "\233\uff12\245\uff12\001\002\000\210\012\ufffa\015\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\060\ufffa\063" +
    "\ufffa\064\ufffa\066\ufffa\070\ufffa\100\ufffa\101\ufffa\104\ufffa" +
    "\106\ufffa\110\ufffa\113\ufffa\125\ufffa\126\ufffa\127\ufffa\130" +
    "\ufffa\141\ufffa\142\ufffa\150\ufffa\151\ufffa\153\ufffa\157\ufffa" +
    "\161\ufffa\163\ufffa\167\ufffa\171\ufffa\173\ufffa\174\ufffa\175" +
    "\ufffa\176\ufffa\177\ufffa\200\ufffa\201\ufffa\202\ufffa\203\ufffa" +
    "\204\ufffa\212\ufffa\214\ufffa\215\ufffa\233\ufffa\245\ufffa\001" +
    "\002\000\004\002\000\001\002\000\004\225\uff14\001\002" +
    "\000\004\225\uff13\001\002\000\016\237\042\240\035\241" +
    "\037\242\040\243\041\244\034\001\002\000\006\006\ufff3" +
    "\007\ufff3\001\002\000\006\006\ufff7\007\ufff7\001\002\000" +
    "\006\006\045\007\043\001\002\000\006\006\ufff6\007\ufff6" +
    "\001\002\000\006\006\ufff5\007\ufff5\001\002\000\006\006" +
    "\ufff4\007\ufff4\001\002\000\006\006\ufff8\007\ufff8\001\002" +
    "\000\004\224\ufff1\001\002\000\004\224\047\001\002\000" +
    "\004\224\ufff2\001\002\000\004\225\uff15\001\002\000\004" +
    "\234\050\001\002\000\006\235\052\236\053\001\002\000" +
    "\004\211\054\001\002\000\004\211\uffef\001\002\000\004" +
    "\211\uffee\001\002\000\004\226\055\001\002\000\004\225" +
    "\ufff0\001\002\000\004\225\uff16\001\002\000\016\002\ufffd" +
    "\004\005\161\011\163\007\212\012\214\013\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\ufffe\001\002\000\016" +
    "\237\042\240\035\241\037\242\040\243\041\244\034\001" +
    "\002\000\006\006\045\007\043\001\002\000\004\224\047" +
    "\001\002\000\004\225\017\001\002\000\210\012\ufffb\015" +
    "\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\025\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\033\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\060" +
    "\ufffb\063\ufffb\064\ufffb\066\ufffb\070\ufffb\100\ufffb\101\ufffb" +
    "\104\ufffb\106\ufffb\110\ufffb\113\ufffb\125\ufffb\126\ufffb\127" +
    "\ufffb\130\ufffb\141\ufffb\142\ufffb\150\ufffb\151\ufffb\153\ufffb" +
    "\157\ufffb\161\ufffb\163\ufffb\167\ufffb\171\ufffb\173\ufffb\174" +
    "\ufffb\175\ufffb\176\ufffb\177\ufffb\200\ufffb\201\ufffb\202\ufffb" +
    "\203\ufffb\204\ufffb\212\ufffb\214\ufffb\215\ufffb\233\ufffb\245" +
    "\ufffb\001\002\000\004\230\u0209\001\002\000\010\046\u0206" +
    "\056\u0205\060\u0207\001\002\000\004\225\017\001\002\000" +
    "\004\027\u0202\001\002\000\012\013\u014c\016\u01f6\053\u014d" +
    "\057\u014b\001\002\000\006\063\u01f3\133\u01f2\001\002\000" +
    "\006\224\u01ea\225\uff5b\001\002\000\004\225\uffe3\001\002" +
    "\000\030\013\u01c9\025\u01c8\042\u01c4\043\u01ca\047\u01cb\050" +
    "\u01c7\051\u01ce\053\u01c5\054\u01c6\126\u01cc\157\u01cd\001\002" +
    "\000\004\224\u01a6\001\002\000\004\230\u01bf\001\002\000" +
    "\212\010\uffeb\012\146\015\117\017\173\021\176\022\112" +
    "\023\110\025\150\027\067\030\163\031\175\033\130\035" +
    "\124\036\105\037\205\040\122\041\077\042\157\043\073" +
    "\046\111\047\202\050\123\051\171\052\070\053\204\054" +
    "\125\055\210\056\167\060\201\063\200\064\075\066\144" +
    "\070\135\100\074\101\151\104\174\106\116\110\153\113" +
    "\113\125\107\126\104\127\072\130\143\141\162\142\212" +
    "\150\141\151\203\153\177\157\152\161\011\163\007\167" +
    "\154\171\101\173\207\174\161\175\103\176\166\177\140" +
    "\200\160\201\115\202\127\203\134\204\126\212\012\214" +
    "\013\215\120\233\137\245\132\001\002\000\004\224\uff54" +
    "\001\002\000\004\043\u01ba\001\002\000\010\012\u019f\225" +
    "\uff34\230\u01a0\001\002\000\004\225\uffdc\001\002\000\010" +
    "\032\u0197\075\u0196\100\u0198\001\002\000\004\005\u0190\001" +
    "\002\000\006\224\uffbc\225\uffbc\001\002\000\004\012\u018f" +
    "\001\002\000\012\046\u018b\052\u0189\056\u018a\060\u018c\001" +
    "\002\000\004\225\uffd9\001\002\000\004\245\u0188\001\002" +
    "\000\004\107\u0183\001\002\000\004\016\u0181\001\002\000" +
    "\004\155\u017f\001\002\000\006\224\u0111\225\uff86\001\002" +
    "\000\004\224\u017a\001\002\000\006\043\u0177\057\u0176\001" +
    "\002\000\004\012\u0175\001\002\000\014\043\u016c\053\u016b" +
    "\057\u0168\106\u016a\157\u0169\001\002\000\006\224\u011f\225" +
    "\uff30\001\002\000\004\224\uff49\001\002\000\006\034\u0163" +
    "\065\u0164\001\002\000\004\010\u015d\001\002\000\006\026" +
    "\u0146\222\u0147\001\002\000\004\225\uffdb\001\002\000\006" +
    "\224\u011f\225\uff30\001\002\000\004\230\u0132\001\002\000" +
    "\004\225\uffe2\001\002\000\224\012\uffe5\015\uffe5\017\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\025\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5" +
    "\063\uffe5\064\uffe5\066\uffe5\070\uffe5\100\uffe5\101\uffe5\104" +
    "\uffe5\106\uffe5\110\uffe5\113\uffe5\125\uffe5\126\uffe5\127\uffe5" +
    "\130\uffe5\141\uffe5\142\uffe5\150\uffe5\151\uffe5\153\uffe5\157" +
    "\uffe5\161\uffe5\163\uffe5\171\uffe5\172\uffe5\173\uffe5\174\uffe5" +
    "\175\uffe5\176\uffe5\177\uffe5\200\uffe5\201\uffe5\202\uffe5\203" +
    "\uffe5\204\uffe5\212\uffe5\214\uffe5\215\uffe5\224\uffe5\225\uffe5" +
    "\226\uffe5\230\uffe5\231\uffe5\233\u012f\245\uffe5\001\002\000" +
    "\004\224\uff50\001\002\000\006\224\u011f\225\uff30\001\002" +
    "\000\004\225\uffd7\001\002\000\004\016\u011c\001\002\000" +
    "\004\067\u010b\001\002\000\004\224\377\001\002\000\004" +
    "\230\357\001\002\000\004\225\uffe0\001\002\000\006\023" +
    "\351\114\350\001\002\000\004\245\346\001\002\000\010" +
    "\043\343\057\341\115\342\001\002\000\004\063\337\001" +
    "\002\000\004\233\137\001\002\000\004\225\uffdd\001\002" +
    "\000\004\225\uffda\001\002\000\024\043\314\046\313\051" +
    "\320\052\316\053\311\055\312\056\315\057\321\060\317" +
    "\001\002\000\004\224\uff4d\001\002\000\004\224\uff56\001" +
    "\002\000\004\230\276\001\002\000\004\015\273\001\002" +
    "\000\004\225\uffe1\001\002\000\004\225\uffe4\001\002\000" +
    "\004\224\uff4e\001\002\000\006\224\uffb4\225\uffb4\001\002" +
    "\000\204\012\146\015\117\017\173\021\176\022\112\023" +
    "\110\025\150\027\067\030\163\031\175\033\130\035\124" +
    "\036\105\037\205\040\122\041\077\042\157\043\073\046" +
    "\111\047\202\050\123\051\171\052\070\053\204\054\125" +
    "\055\210\056\167\060\201\063\200\064\075\066\144\070" +
    "\135\100\074\101\151\104\174\106\116\110\153\113\113" +
    "\125\107\126\104\127\072\130\143\141\162\142\212\150" +
    "\141\151\203\153\177\157\152\161\011\163\007\171\101" +
    "\173\207\174\161\175\103\176\166\177\140\200\160\201" +
    "\115\202\127\203\134\204\126\212\012\214\013\215\120" +
    "\245\132\001\002\000\004\013\270\001\002\000\004\225" +
    "\uffd8\001\002\000\004\020\266\001\002\000\004\105\263" +
    "\001\002\000\004\032\261\001\002\000\004\012\260\001" +
    "\002\000\004\154\256\001\002\000\004\224\252\001\002" +
    "\000\004\056\251\001\002\000\022\043\237\046\234\052" +
    "\230\053\235\055\232\056\231\057\233\060\236\001\002" +
    "\000\004\012\227\001\002\000\006\013\225\057\224\001" +
    "\002\000\010\036\217\076\220\112\216\001\002\000\004" +
    "\225\uffde\001\002\000\004\224\uff57\001\002\000\004\102" +
    "\214\001\002\000\004\225\uffdf\001\002\000\006\012\213" +
    "\224\uff4a\001\002\000\004\224\uff71\001\002\000\004\046" +
    "\215\001\002\000\006\224\uffa7\225\uffa7\001\002\000\004" +
    "\036\223\001\002\000\004\012\222\001\002\000\004\012" +
    "\221\001\002\000\004\224\uff75\001\002\000\004\224\uff74" +
    "\001\002\000\004\224\uff55\001\002\000\004\013\226\001" +
    "\002\000\006\224\uffb7\225\uffb7\001\002\000\006\224\uffb3" +
    "\225\uffb3\001\002\000\004\224\uff6e\001\002\000\004\046" +
    "\250\001\002\000\006\224\uffa5\225\uffa5\001\002\000\004" +
    "\102\246\001\002\000\006\013\243\053\244\001\002\000" +
    "\006\224\uffbb\225\uffbb\001\002\000\004\013\242\001\002" +
    "\000\004\056\241\001\002\000\004\013\240\001\002\000" +
    "\006\224\uffa0\225\uffa0\001\002\000\006\224\uff9b\225\uff9b" +
    "\001\002\000\006\224\uff9e\225\uff9e\001\002\000\006\224" +
    "\uff9d\225\uff9d\001\002\000\004\013\245\001\002\000\006" +
    "\224\uff8f\225\uff8f\001\002\000\004\046\247\001\002\000" +
    "\006\224\uffb5\225\uffb5\001\002\000\006\224\uffb8\225\uffb8" +
    "\001\002\000\006\224\uffb2\225\uffb2\001\002\000\004\245" +
    "\253\001\002\000\004\122\254\001\002\000\004\226\255" +
    "\001\002\000\004\225\uff18\001\002\000\004\012\257\001" +
    "\002\000\004\224\uff69\001\002\000\004\224\uff7f\001\002" +
    "\000\004\012\262\001\002\000\004\224\uff79\001\002\000" +
    "\006\046\265\056\264\001\002\000\006\224\uffb1\225\uffb1" +
    "\001\002\000\006\224\uffb0\225\uffb0\001\002\000\004\012" +
    "\267\001\002\000\004\224\uff80\001\002\000\006\224\uffb9" +
    "\225\uffb9\001\002\000\004\225\017\001\002\000\212\010" +
    "\uffea\012\uffea\015\uffea\017\uffea\021\uffea\022\uffea\023\uffea" +
    "\025\uffea\027\uffea\030\uffea\031\uffea\033\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\060\uffea\063\uffea\064\uffea\066\uffea\070\uffea" +
    "\100\uffea\101\uffea\104\uffea\106\uffea\110\uffea\113\uffea\125" +
    "\uffea\126\uffea\127\uffea\130\uffea\141\uffea\142\uffea\150\uffea" +
    "\151\uffea\153\uffea\157\uffea\161\uffea\163\uffea\167\uffea\171" +
    "\uffea\173\uffea\174\uffea\175\uffea\176\uffea\177\uffea\200\uffea" +
    "\201\uffea\202\uffea\203\uffea\204\uffea\212\uffea\214\uffea\215" +
    "\uffea\233\uffea\245\uffea\001\002\000\004\016\274\001\002" +
    "\000\004\012\275\001\002\000\004\224\uff7a\001\002\000" +
    "\012\026\277\146\302\151\301\152\300\001\002\000\004" +
    "\075\310\001\002\000\004\225\uff23\001\002\000\004\141" +
    "\307\001\002\000\004\143\304\001\002\000\004\225\uff25" +
    "\001\002\000\004\144\305\001\002\000\004\245\306\001" +
    "\002\000\004\225\uff21\001\002\000\004\225\uff22\001\002" +
    "\000\004\225\uff24\001\002\000\004\013\333\001\002\000" +
    "\004\102\331\001\002\000\006\224\uffa8\225\uffa8\001\002" +
    "\000\004\013\330\001\002\000\006\224\uff9c\225\uff9c\001" +
    "\002\000\004\046\327\001\002\000\004\056\326\001\002" +
    "\000\004\013\325\001\002\000\006\013\322\053\323\001" +
    "\002\000\006\224\uffa1\225\uffa1\001\002\000\004\013\324" +
    "\001\002\000\006\224\uff97\225\uff97\001\002\000\006\224" +
    "\uff92\225\uff92\001\002\000\006\224\uff95\225\uff95\001\002" +
    "\000\006\224\uff94\225\uff94\001\002\000\006\224\uffbd\225" +
    "\uffbd\001\002\000\004\046\332\001\002\000\006\224\uff96" +
    "\225\uff96\001\002\000\006\224\uff9f\225\uff9f\001\002\000" +
    "\204\012\146\015\117\017\173\021\176\022\112\023\110" +
    "\025\150\027\067\030\163\031\175\033\130\035\124\036" +
    "\105\037\205\040\122\041\077\042\157\043\073\046\111" +
    "\047\202\050\123\051\171\052\070\053\204\054\125\055" +
    "\210\056\167\060\201\063\200\064\075\066\144\070\135" +
    "\100\074\101\151\104\174\106\116\110\153\113\113\125" +
    "\107\126\104\127\072\130\143\141\162\142\212\150\141" +
    "\151\203\153\177\157\152\161\011\163\007\171\101\173" +
    "\207\174\161\175\103\176\166\177\140\200\160\201\115" +
    "\202\127\203\134\204\126\212\012\214\013\215\120\245" +
    "\132\001\002\000\004\225\017\001\002\000\212\010\uffe9" +
    "\012\uffe9\015\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\025" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\060\uffe9\063\uffe9\064\uffe9\066\uffe9\070\uffe9\100" +
    "\uffe9\101\uffe9\104\uffe9\106\uffe9\110\uffe9\113\uffe9\125\uffe9" +
    "\126\uffe9\127\uffe9\130\uffe9\141\uffe9\142\uffe9\150\uffe9\151" +
    "\uffe9\153\uffe9\157\uffe9\161\uffe9\163\uffe9\167\uffe9\171\uffe9" +
    "\173\uffe9\174\uffe9\175\uffe9\176\uffe9\177\uffe9\200\uffe9\201" +
    "\uffe9\202\uffe9\203\uffe9\204\uffe9\212\uffe9\214\uffe9\215\uffe9" +
    "\233\uffe9\245\uffe9\001\002\000\004\036\340\001\002\000" +
    "\004\224\uff4b\001\002\000\004\013\345\001\002\000\006" +
    "\224\uff89\225\uff89\001\002\000\004\013\344\001\002\000" +
    "\006\224\uff8b\225\uff8b\001\002\000\006\224\uff8a\225\uff8a" +
    "\001\002\000\004\026\347\001\002\000\004\224\uff53\001" +
    "\002\000\004\043\355\001\002\000\004\005\352\001\002" +
    "\000\004\024\353\001\002\000\004\012\354\001\002\000" +
    "\004\224\uff7c\001\002\000\004\013\356\001\002\000\006" +
    "\224\uffab\225\uffab\001\002\000\024\013\361\015\360\017" +
    "\362\021\365\035\364\142\367\160\366\224\uff5f\245\363" +
    "\001\002\000\004\016\376\001\002\000\004\014\375\001" +
    "\002\000\004\020\374\001\002\000\004\026\371\001\002" +
    "\000\004\224\uff60\001\002\000\004\224\uff65\001\002\000" +
    "\004\070\370\001\002\000\004\224\uff63\001\002\000\004" +
    "\224\uff61\001\002\000\006\027\372\142\373\001\002\000" +
    "\004\224\uff66\001\002\000\004\224\uff64\001\002\000\004" +
    "\224\uff67\001\002\000\004\224\uff68\001\002\000\004\224" +
    "\uff62\001\002\000\006\205\u0102\206\u0101\001\002\000\004" +
    "\225\uff82\001\002\000\004\232\u0108\001\002\000\004\245" +
    "\u0103\001\002\000\004\221\u0104\001\002\000\004\206\u0105" +
    "\001\002\000\004\245\u0106\001\002\000\004\226\u0107\001" +
    "\002\000\004\225\uff5e\001\002\000\004\245\u0109\001\002" +
    "\000\004\226\u010a\001\002\000\004\225\uff5d\001\002\000" +
    "\016\075\u010d\134\u010f\143\u010c\224\uff3e\225\uff3e\245\uff3e" +
    "\001\002\000\010\224\uff41\225\uff41\245\uff41\001\002\000" +
    "\010\224\uff3f\225\uff3f\245\uff3f\001\002\000\010\224\u0111" +
    "\225\uff3a\245\u0112\001\002\000\004\135\u0110\001\002\000" +
    "\010\224\uff40\225\uff40\245\uff40\001\002\000\004\245\u0119" +
    "\001\002\000\004\005\u0116\001\002\000\004\225\uff3b\001" +
    "\002\000\004\225\uff42\001\002\000\004\225\uff3c\001\002" +
    "\000\004\245\u0117\001\002\000\006\224\u0111\225\uff3a\001" +
    "\002\000\004\225\uff3d\001\002\000\004\121\u011a\001\002" +
    "\000\004\226\u011b\001\002\000\006\224\uff85\225\uff85\001" +
    "\002\000\004\027\u011d\001\002\000\004\012\u011e\001\002" +
    "\000\004\224\uff70\001\002\000\006\123\u0122\205\u0123\001" +
    "\002\000\004\225\uff37\001\002\000\004\226\u012e\001\002" +
    "\000\004\245\u012b\001\002\000\004\245\u0124\001\002\000" +
    "\004\221\u0125\001\002\000\006\206\u0126\210\u0127\001\002" +
    "\000\004\245\u0129\001\002\000\004\226\u0128\001\002\000" +
    "\004\225\uff31\001\002\000\004\226\u012a\001\002\000\004" +
    "\225\uff32\001\002\000\004\145\u012c\001\002\000\004\233" +
    "\137\001\002\000\004\226\uff2f\001\002\000\004\225\uff33" +
    "\001\002\000\224\012\uffe5\015\uffe5\017\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5\063\uffe5\064" +
    "\uffe5\066\uffe5\070\uffe5\100\uffe5\101\uffe5\104\uffe5\106\uffe5" +
    "\110\uffe5\113\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\141" +
    "\uffe5\142\uffe5\150\uffe5\151\uffe5\153\uffe5\157\uffe5\161\uffe5" +
    "\163\uffe5\171\uffe5\172\uffe5\173\uffe5\174\uffe5\175\uffe5\176" +
    "\uffe5\177\uffe5\200\uffe5\201\uffe5\202\uffe5\203\uffe5\204\uffe5" +
    "\212\uffe5\214\uffe5\215\uffe5\224\uffe5\225\uffe5\226\uffe5\230" +
    "\uffe5\231\uffe5\233\u012f\245\uffe5\001\002\000\222\012\uffe7" +
    "\015\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\060\uffe7\063\uffe7\064\uffe7\066\uffe7\070\uffe7\100" +
    "\uffe7\101\uffe7\104\uffe7\106\uffe7\110\uffe7\113\uffe7\125\uffe7" +
    "\126\uffe7\127\uffe7\130\uffe7\141\uffe7\142\uffe7\150\uffe7\151" +
    "\uffe7\153\uffe7\157\uffe7\161\uffe7\163\uffe7\171\uffe7\172\uffe7" +
    "\173\uffe7\174\uffe7\175\uffe7\176\uffe7\177\uffe7\200\uffe7\201" +
    "\uffe7\202\uffe7\203\uffe7\204\uffe7\212\uffe7\214\uffe7\215\uffe7" +
    "\224\uffe7\225\uffe7\226\uffe7\230\uffe7\231\uffe7\245\uffe7\001" +
    "\002\000\222\012\uffe6\015\uffe6\017\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6\063\uffe6\064\uffe6" +
    "\066\uffe6\070\uffe6\100\uffe6\101\uffe6\104\uffe6\106\uffe6\110" +
    "\uffe6\113\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\141\uffe6" +
    "\142\uffe6\150\uffe6\151\uffe6\153\uffe6\157\uffe6\161\uffe6\163" +
    "\uffe6\171\uffe6\172\uffe6\173\uffe6\174\uffe6\175\uffe6\176\uffe6" +
    "\177\uffe6\200\uffe6\201\uffe6\202\uffe6\203\uffe6\204\uffe6\212" +
    "\uffe6\214\uffe6\215\uffe6\224\uffe6\225\uffe6\226\uffe6\230\uffe6" +
    "\231\uffe6\245\uffe6\001\002\000\012\071\u0137\072\u0135\147" +
    "\u0133\151\u0136\001\002\000\006\224\uff1c\225\uff1c\001\002" +
    "\000\006\224\u013a\225\uff19\001\002\000\006\224\uff1e\225" +
    "\uff1e\001\002\000\004\070\u0138\001\002\000\006\224\uff1f" +
    "\225\uff1f\001\002\000\006\224\uff1d\225\uff1d\001\002\000" +
    "\004\225\uff20\001\002\000\006\170\u013c\207\u013b\001\002" +
    "\000\004\245\u0141\001\002\000\004\245\u013d\001\002\000" +
    "\004\072\u013e\001\002\000\004\245\u013f\001\002\000\004" +
    "\226\u0140\001\002\000\004\225\uff1b\001\002\000\004\072" +
    "\u0142\001\002\000\004\245\u0143\001\002\000\004\226\u0144" +
    "\001\002\000\004\225\uff1a\001\002\000\004\225\uff35\001" +
    "\002\000\004\027\u015a\001\002\000\050\025\u0148\041\077" +
    "\042\157\043\u014a\046\111\047\202\050\123\051\171\052" +
    "\070\053\204\054\125\055\210\056\167\060\201\104\174" +
    "\106\116\113\113\126\104\157\152\001\002\000\004\114" +
    "\350\001\002\000\006\224\u0111\225\uff86\001\002\000\010" +
    "\013\u014c\053\u014d\057\u014b\001\002\000\006\013\u014f\053" +
    "\u0150\001\002\000\006\224\uffbe\225\uffbe\001\002\000\004" +
    "\013\u014e\001\002\000\006\224\uffa2\225\uffa2\001\002\000" +
    "\006\224\uffa4\225\uffa4\001\002\000\004\013\u0151\001\002" +
    "\000\006\224\uff9a\225\uff9a\001\002\000\004\225\uffd1\001" +
    "\002\000\006\224\u0155\225\uff83\001\002\000\004\225\uff87" +
    "\001\002\000\004\233\137\001\002\000\004\245\u0157\001" +
    "\002\000\004\124\u0158\001\002\000\004\226\u0159\001\002" +
    "\000\004\225\uff84\001\002\000\004\012\u015b\001\002\000" +
    "\004\224\uff7b\001\002\000\016\002\ufffc\004\ufffc\161\ufffc" +
    "\163\ufffc\212\ufffc\214\ufffc\001\002\000\004\005\u015e\001" +
    "\002\000\016\237\042\240\035\241\037\242\040\243\041" +
    "\244\034\001\002\000\006\006\045\007\043\001\002\000" +
    "\004\224\047\001\002\000\004\225\017\001\002\000\016" +
    "\002\ufff9\004\ufff9\161\ufff9\163\ufff9\212\ufff9\214\ufff9\001" +
    "\002\000\004\012\u0166\001\002\000\004\012\u0165\001\002" +
    "\000\004\224\uff6d\001\002\000\004\224\uff78\001\002\000" +
    "\004\225\uff39\001\002\000\006\013\u0172\053\u0173\001\002" +
    "\000\010\013\u0171\224\uff8d\225\uff8d\001\002\000\004\107" +
    "\u016f\001\002\000\004\013\u016e\001\002\000\004\013\u016d" +
    "\001\002\000\006\224\uffa9\225\uffa9\001\002\000\006\224" +
    "\uffb6\225\uffb6\001\002\000\004\013\u0170\001\002\000\006" +
    "\224\uffae\225\uffae\001\002\000\006\224\uff8c\225\uff8c\001" +
    "\002\000\006\224\uff98\225\uff98\001\002\000\004\013\u0174" +
    "\001\002\000\006\224\uff90\225\uff90\001\002\000\004\224" +
    "\uff77\001\002\000\004\013\u0179\001\002\000\004\013\u0178" +
    "\001\002\000\006\224\uffba\225\uffba\001\002\000\006\224" +
    "\uff91\225\uff91\001\002\000\004\245\u017b\001\002\000\004" +
    "\117\u017c\001\002\000\004\226\u017d\001\002\000\004\225" +
    "\uff17\001\002\000\004\225\uffd0\001\002\000\004\012\u0180" +
    "\001\002\000\004\224\uff6a\001\002\000\004\012\u0182\001" +
    "\002\000\004\224\uff81\001\002\000\006\057\u0184\115\u0185" +
    "\001\002\000\004\013\u0187\001\002\000\004\013\u0186\001" +
    "\002\000\006\224\uffaf\225\uffaf\001\002\000\006\224\uff99" +
    "\225\uff99\001\002\000\004\224\uff4c\001\002\000\004\056" +
    "\u018e\001\002\000\006\224\uffac\225\uffac\001\002\000\006" +
    "\224\uffad\225\uffad\001\002\000\004\056\u018d\001\002\000" +
    "\006\224\uff93\225\uff93\001\002\000\006\224\uff8e\225\uff8e" +
    "\001\002\000\004\224\uff7e\001\002\000\004\024\u0191\001" +
    "\002\000\006\012\u0193\015\u0192\001\002\000\004\016\u0194" +
    "\001\002\000\004\224\uff6b\001\002\000\004\012\u0195\001" +
    "\002\000\004\224\uff7d\001\002\000\004\223\u019b\001\002" +
    "\000\004\012\u019a\001\002\000\004\012\u0199\001\002\000" +
    "\004\224\uff6f\001\002\000\004\224\uff73\001\002\000\004" +
    "\233\137\001\002\000\004\231\u019d\001\002\000\004\233" +
    "\137\001\002\000\004\225\uff38\001\002\000\004\224\uff76" +
    "\001\002\000\006\125\u01a2\204\u01a1\001\002\000\004\225" +
    "\uff36\001\002\000\004\100\u01a3\001\002\000\006\223\u01a4" +
    "\233\137\001\002\000\004\233\137\001\002\000\004\224" +
    "\u01a6\001\002\000\006\205\u01ad\245\u01ac\001\002\000\004" +
    "\231\u01a8\001\002\000\004\233\137\001\002\000\004\224" +
    "\u01a6\001\002\000\004\225\uff58\001\002\000\004\226\u01b4" +
    "\001\002\000\004\120\u01b3\001\002\000\004\245\u01ae\001" +
    "\002\000\006\221\u01af\226\uff44\001\002\000\006\206\u01b0" +
    "\210\u01b1\001\002\000\004\245\u01b2\001\002\000\004\226" +
    "\uff46\001\002\000\004\226\uff47\001\002\000\004\226\uff45" +
    "\001\002\000\006\225\uff48\231\uff48\001\002\000\004\224" +
    "\u01a6\001\002\000\004\231\u01b7\001\002\000\004\233\137" +
    "\001\002\000\004\224\u01a6\001\002\000\004\225\uff59\001" +
    "\002\000\004\013\u01bb\001\002\000\006\224\uffa3\225\uffa3" +
    "\001\002\000\004\010\uffed\001\002\000\212\010\uffeb\012" +
    "\146\015\117\017\173\021\176\022\112\023\110\025\150" +
    "\027\067\030\163\031\175\033\130\035\124\036\105\037" +
    "\205\040\122\041\077\042\157\043\073\046\111\047\202" +
    "\050\123\051\171\052\070\053\204\054\125\055\210\056" +
    "\167\060\201\063\200\064\075\066\144\070\135\100\074" +
    "\101\151\104\174\106\116\110\153\113\113\125\107\126" +
    "\104\127\072\130\143\141\162\142\212\150\141\151\203" +
    "\153\177\157\152\161\011\163\007\167\154\171\101\173" +
    "\207\174\161\175\103\176\166\177\140\200\160\201\115" +
    "\202\127\203\134\204\126\212\012\214\013\215\120\233" +
    "\137\245\132\001\002\000\004\010\uffec\001\002\000\004" +
    "\233\137\001\002\000\004\172\u01c1\001\002\000\004\233" +
    "\137\001\002\000\004\225\uff43\001\002\000\004\225\uff5a" +
    "\001\002\000\006\043\u01e7\057\u01e6\001\002\000\004\013" +
    "\u01e5\001\002\000\006\043\u01e2\157\u01e1\001\002\000\006" +
    "\043\u01de\057\u01dd\001\002\000\004\114\u01da\001\002\000" +
    "\006\224\uffcf\225\uffcf\001\002\000\006\013\u01d8\057\u01d7" +
    "\001\002\000\004\043\u01d5\001\002\000\004\043\u01d3\001" +
    "\002\000\006\057\u01d0\115\u01d1\001\002\000\004\013\u01cf" +
    "\001\002\000\006\224\uffc2\225\uffc2\001\002\000\004\013" +
    "\u01d2\001\002\000\006\224\uffca\225\uffca\001\002\000\006" +
    "\224\uffc1\225\uffc1\001\002\000\004\013\u01d4\001\002\000" +
    "\006\224\uffc4\225\uffc4\001\002\000\004\013\u01d6\001\002" +
    "\000\006\224\uffbf\225\uffbf\001\002\000\004\013\u01d9\001" +
    "\002\000\006\224\uffce\225\uffce\001\002\000\006\224\uffc8" +
    "\225\uffc8\001\002\000\004\043\u01db\001\002\000\004\013" +
    "\u01dc\001\002\000\006\224\uffcb\225\uffcb\001\002\000\004" +
    "\013\u01e0\001\002\000\004\013\u01df\001\002\000\006\224" +
    "\uffcc\225\uffcc\001\002\000\006\224\uffc0\225\uffc0\001\002" +
    "\000\010\013\u01e4\224\uffc5\225\uffc5\001\002\000\004\013" +
    "\u01e3\001\002\000\006\224\uffc7\225\uffc7\001\002\000\006" +
    "\224\uffc6\225\uffc6\001\002\000\006\224\uffc3\225\uffc3\001" +
    "\002\000\004\013\u01e9\001\002\000\004\013\u01e8\001\002" +
    "\000\006\224\uffcd\225\uffcd\001\002\000\006\224\uffc9\225" +
    "\uffc9\001\002\000\004\213\u01eb\001\002\000\004\230\u01ec" +
    "\001\002\000\004\245\u01ed\001\002\000\004\123\u01ee\001" +
    "\002\000\004\230\u01ef\001\002\000\004\245\u01f0\001\002" +
    "\000\004\226\u01f1\001\002\000\004\225\uff5c\001\002\000" +
    "\004\036\u01f5\001\002\000\006\036\u01f4\224\uff52\001\002" +
    "\000\004\224\uff51\001\002\000\004\224\uff4f\001\002\000" +
    "\006\027\u01f8\233\137\001\002\000\004\044\u01fa\001\002" +
    "\000\004\012\u01f9\001\002\000\004\224\uff6c\001\002\000" +
    "\004\233\137\001\002\000\006\225\uffd4\230\u01fc\001\002" +
    "\000\004\051\u01fe\001\002\000\004\225\uffd6\001\002\000" +
    "\004\166\u01ff\001\002\000\006\225\uffd2\233\137\001\002" +
    "\000\004\225\uffd5\001\002\000\004\225\uffd3\001\002\000" +
    "\004\012\u0203\001\002\000\004\224\uff72\001\002\000\212" +
    "\010\uffe8\012\uffe8\015\uffe8\017\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\060\uffe8\063\uffe8\064\uffe8\066\uffe8\070" +
    "\uffe8\100\uffe8\101\uffe8\104\uffe8\106\uffe8\110\uffe8\113\uffe8" +
    "\125\uffe8\126\uffe8\127\uffe8\130\uffe8\141\uffe8\142\uffe8\150" +
    "\uffe8\151\uffe8\153\uffe8\157\uffe8\161\uffe8\163\uffe8\167\uffe8" +
    "\171\uffe8\173\uffe8\174\uffe8\175\uffe8\176\uffe8\177\uffe8\200" +
    "\uffe8\201\uffe8\202\uffe8\203\uffe8\204\uffe8\212\uffe8\214\uffe8" +
    "\215\uffe8\233\uffe8\245\uffe8\001\002\000\006\224\uff88\225" +
    "\uff88\001\002\000\006\224\uffaa\225\uffaa\001\002\000\004" +
    "\056\u0208\001\002\000\006\224\uffa6\225\uffa6\001\002\000" +
    "\022\043\u0210\111\u0212\125\u020a\127\u020d\130\u0211\131\u020f" +
    "\151\u020c\245\u020e\001\002\000\004\127\u021e\001\002\000" +
    "\004\225\uff2e\001\002\000\004\027\u021d\001\002\000\004" +
    "\225\uff2c\001\002\000\004\145\u0219\001\002\000\004\005" +
    "\u0216\001\002\000\004\016\u0215\001\002\000\004\016\u0214" +
    "\001\002\000\004\076\u0213\001\002\000\004\225\uff2d\001" +
    "\002\000\004\225\uff2b\001\002\000\004\225\uff2a\001\002" +
    "\000\004\132\u0217\001\002\000\004\027\u0218\001\002\000" +
    "\004\225\uff28\001\002\000\004\142\u021a\001\002\000\004" +
    "\012\u021b\001\002\000\004\230\u021c\001\002\000\004\225" +
    "\uff27\001\002\000\004\225\uff26\001\002\000\004\225\uff29" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u021c\000\014\002\013\003\007\005\005\006\003\063" +
    "\014\001\001\000\054\014\130\016\101\017\167\021\070" +
    "\022\164\025\075\026\120\032\135\033\144\035\163\036" +
    "\146\037\077\042\210\043\205\047\154\052\105\054\132" +
    "\056\155\061\113\062\171\063\141\001\001\000\002\001" +
    "\001\000\012\004\057\005\056\006\003\063\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\015\001\001\000\006\006\026\063\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\060\005\056" +
    "\006\003\063\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\062\001\001\000\004\011\063\001\001" +
    "\000\004\012\064\001\001\000\004\064\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u0203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u01c2\001\001\000\002\001\001\000" +
    "\054\015\u01bb\016\u01bc\017\167\021\070\022\164\025\075" +
    "\026\120\032\135\033\144\035\163\036\146\037\077\042" +
    "\210\043\205\047\154\052\105\054\132\056\155\061\113" +
    "\062\171\063\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\u017d\030\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u0166\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u015b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\u0144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u012f\001\001\000\002\001\001\000\004\050\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\021\270\022\164\025\075\026\120\032" +
    "\135\033\144\035\163\036\146\037\077\042\210\043\205" +
    "\047\154\052\105\054\132\056\155\061\113\062\171\063" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\021\334\022\164\025\075\026\120\032\135\033" +
    "\144\035\163\036\146\037\077\042\210\043\205\047\154" +
    "\052\105\054\132\056\155\061\113\062\171\063\141\001" +
    "\001\000\004\064\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\u0112\045\u0113\046" +
    "\u0114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u0112" +
    "\046\u0117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u0120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u0133\001\001\000\002\001\001\000\004\060\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u0148\001\001" +
    "\000\002\001\001\000\006\027\u0151\030\u0152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0153" +
    "\001\001\000\002\001\001\000\004\017\u0155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u015e\001\001\000\004" +
    "\011\u015f\001\001\000\004\012\u0160\001\001\000\004\064" +
    "\u0161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u019b\001\001\000\002\001\001\000\004\017\u019d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u01a4\001\001" +
    "\000\004\017\u01b4\001\001\000\004\040\u01a6\001\001\000" +
    "\004\041\u01aa\001\001\000\002\001\001\000\004\017\u01a8" +
    "\001\001\000\004\040\u01a9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u01b5\001\001\000\002\001\001\000\004\017" +
    "\u01b7\001\001\000\004\040\u01b8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\015\u01bd\016\u01bc\017\167\021\070\022\164\025\075" +
    "\026\120\032\135\033\144\035\163\036\146\037\077\042" +
    "\210\043\205\047\154\052\105\054\132\056\155\061\113" +
    "\062\171\063\141\001\001\000\002\001\001\000\004\017" +
    "\u01bf\001\001\000\002\001\001\000\004\017\u01c1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u01f6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u01fa\001\001\000\004" +
    "\023\u01fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\u0200\024\u01ff\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u020a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // play_role ::= NEUTRAL 
            {
              PlayRole RESULT =null;
		 RESULT = PlayRole.NEUTRAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_role",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // play_role ::= AWAY_TEAM 
            {
              PlayRole RESULT =null;
		 RESULT = PlayRole.AWAY; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_role",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // play_role ::= HOME_TEAM 
            {
              PlayRole RESULT =null;
		 RESULT = PlayRole.HOME; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_role",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // context_info ::= LEFT_CURLY NUMBER COMMA play_role RIGHT_CURLY 
            {
              ContextInfo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlayRole pr = (PlayRole)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ContextInfo(Integer.parseInt(n), pr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("context_info",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // review ::= OVERTURN_LITERAL RULING_LITERAL 
            {
              Review RESULT =null;
		 RESULT = new Review(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("review",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // review ::= ALTERCATION_LITERAL RULING_LITERAL 
            {
              Review RESULT =null;
		 RESULT = new Review(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("review",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // review ::= INSTANT_LITERAL REPLAY_LITERAL period_identifier period_type real_time 
            {
              Review RESULT =null;
		 RESULT = new Review(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("review",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // review ::= SUPPORT_LITERAL RULING_LITERAL 
            {
              Review RESULT =null;
		 RESULT = new Review(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("review",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // steal ::= STEAL_LITERAL LEFT_PAREN NUMBER STEAL RIGHT_PAREN 
            {
              Steal RESULT =null;
		 RESULT = new Steal(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("steal",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // block ::= BLOCK_LITERAL LEFT_PAREN NUMBER BLOCK RIGHT_PAREN 
            {
              Block RESULT =null;
		 RESULT = new Block(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // timeout_ending ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_ending",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // timeout_ending ::= LEFT_PAREN REGULAR NUMBER SHORT_LITERAL NUMBER RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_ending",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // timeout_ending ::= LEFT_PAREN FULL_LITERAL NUMBER SHORT_LITERAL NUMBER RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_ending",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // timeout_type ::= OFFICIAL_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Offical"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // timeout_type ::= NO_LITERAL TIMEOUT_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "No Timeout"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // timeout_type ::= SHORT_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // timeout_type ::= REGULAR_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Regular"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // timeout ::= TIMEOUT_LITERAL COLON timeout_type timeout_ending 
            {
              Timeout RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Timeout(tt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ejection_ending ::= FIRST_LITERAL FLAGRANT_LITERAL TYPE_LITERAL NUMBER 
            {
              EjectionEnding RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FlagrantEjectionEnding(Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ejection_ending ::= NO_LITERAL EJECTION_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("No Ejection"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // ejection_ending ::= OTHER_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("Other"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // ejection_ending ::= SECOND_LITERAL TECHNICAL_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("Second Technical"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ejection ::= EJECTION_LITERAL COLON ejection_ending 
            {
              Ejection RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EjectionEnding e = (EjectionEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ejection(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // violation_type ::= NO_LITERAL VIOLATION_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // violation_type ::= NUMBER SEC_LITERAL INBOUND_LITERAL TURNOVER_LITERAL COLON 
            {
              ViolationType RESULT =null;
		 RESULT = new FiveSecInboundViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // violation_type ::= DELAY_LITERAL OF_LITERAL GAME_LITERAL VIOLATION_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DelayGameViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // violation_type ::= DOUBLE_LITERAL LANE_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DoubleLaneViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // violation_type ::= JUMP_LITERAL BALL_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new JumpBallViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // violation_type ::= KICKED_LITERAL BALL_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new KickedBallViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // violation_type ::= LANE_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new LaneViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // violation_type ::= DEFENSIVE_LITERAL GOALTENDING_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DefGTViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // violation ::= VIOLATION_LITERAL COLON violation_type 
            {
              Violation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ViolationType v = (ViolationType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Violation(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // technical_foul_type ::= DEF NUMBER SEC_LITERAL player_statement 
            {
              TechnicalFoulType RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ThreeSecTechnical(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical_foul_type",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // technical_predicate ::= 
            {
              TechnicalPredicate RESULT =null;
		 RESULT = new TechnicalPredicate(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical_predicate",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // technical_predicate ::= LEFT_PAREN P_LITERAL NUMBER PERIOD PENALTY RIGHT_PAREN 
            {
              TechnicalPredicate RESULT =null;
		 RESULT = new TechnicalPredicate(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical_predicate",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // technical_predicate ::= LEFT_PAREN P_LITERAL NUMBER PERIOD T_LITERAL NUMBER RIGHT_PAREN 
            {
              TechnicalPredicate RESULT =null;
		 RESULT = new TechnicalPredicate(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical_predicate",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // technical_predicate ::= LEFT_PAREN technical_foul_type RIGHT_PAREN 
            {
              TechnicalPredicate RESULT =null;
		int tftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TechnicalFoulType tft = (TechnicalFoulType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TechnicalPredicate(tft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical_predicate",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // technical ::= FOUL_LITERAL 
            {
              Technical RESULT =null;
		 RESULT = new Technical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // technical ::= HANGING_TECH_FOUL technical_predicate 
            {
              Technical RESULT =null;
		 RESULT = new TauntingTechnical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // technical ::= FOUL_LITERAL COLON T_FOUL 
            {
              Technical RESULT =null;
		 RESULT = new Technical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // technical ::= TAUNTING_LITERAL technical_predicate 
            {
              Technical RESULT =null;
		 RESULT = new TauntingTechnical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // technical ::= DOUBLE_LITERAL TECHNICAL_LITERAL DASH player_statement COMMA player_statement 
            {
              Technical RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DoubleTechnical(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // technical ::= T_FOUL technical_predicate 
            {
              Technical RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TechnicalPredicate tp = (TechnicalPredicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Technical(tp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // free_throw_outcome ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_outcome",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // free_throw_outcome ::= point_total 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_outcome",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // free_throw_predicate ::= free_throw_outcome 
            {
              FreeThrowPredicate RESULT =null;
		 RESULT = new FreeThrowPredicate(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_predicate",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // free_throw_predicate ::= NUMBER OF_LITERAL NUMBER free_throw_outcome 
            {
              FreeThrowPredicate RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FreeThrowPredicate(Integer.parseInt(n1), Integer.parseInt(n2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_predicate",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // free_throw_type ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // free_throw_type ::= TECHNICAL_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Technical"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // free_throw_type ::= CLEAR_LITERAL PATH_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Clear Path"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // free_throw_type ::= FLAGRANT_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Flagrant"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // free_throw ::= FREE_LITERAL THROW_LITERAL free_throw_type free_throw_predicate 
            {
              FreeThrow RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FreeThrowPredicate p = (FreeThrowPredicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FreeThrow(t, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // substitution ::= SUBSTITUTION COLON player_statement FOR_LITERAL player_statement 
            {
              Substitution RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Substitution(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("substitution",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // foul_total_mid ::= P_LITERAL NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total_mid",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // foul_total_mid ::= NUMBER PERSONAL_FOUL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total_mid",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // foul_total_mid ::= P_LITERAL NUMBER PERIOD PENALTY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total_mid",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // foul_total_mid ::= P_LITERAL NUMBER PERIOD T_LITERAL NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total_mid",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // foul_total ::= LEFT_PAREN foul_total_mid RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // foul_type ::= IN_FOUL 
            {
              FoulType RESULT =null;
		 RESULT = new InboundFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // foul_type ::= INBOUND_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new InboundFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // foul_type ::= SHOOTING_LITERAL BLOCK_LITERAL FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new ShootingBlockFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // foul_type ::= FLAGRANT_FOUL_TYPE NUMBER 
            {
              FoulType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FlagrantFoulType(Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // foul_type ::= AWAY_FROM_PLAY_FOUL 
            {
              FoulType RESULT =null;
		 RESULT = new AwayFromPlayFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // foul_type ::= CP_FOUL 
            {
              FoulType RESULT =null;
		 RESULT = new ClearPathFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // foul_type ::= PERSONAL_LITERAL TAKE_LITERAL FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalTakeFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // foul_type ::= OFF_FOUL 
            {
              FoulType RESULT =null;
		 RESULT = new OffensiveFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // foul_type ::= PERSONAL_LITERAL BLOCK_LITERAL FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalBlockFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // foul_type ::= PERSONAL_LITERAL BLOCK_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalBlockFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // foul_type ::= DEFENSE_LITERAL NUMBER SECOND_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new DefenseThreeSecFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // foul_type ::= S_FOUL 
            {
              FoulType RESULT =null;
		 RESULT = new ShootingFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // foul_type ::= OFFENSIVE_LITERAL CHARGE_LITERAL FOUL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new OffensiveChargeFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // foul_type ::= P_FOUL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // foul_type ::= LB_FOUL 
            {
              FoulType RESULT =null;
		 RESULT = new LooseBallFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // foul ::= FOUL_LITERAL COLON DOUBLE_LITERAL PERSONAL_LITERAL player_statement foul_total COMMA player_statement foul_total 
            {
              Foul RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoublePersonalFoul(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // foul ::= FOUL_LITERAL COLON DOUBLE_LITERAL PERSONAL_LITERAL DASH player_statement foul_total COMMA player_statement foul_total 
            {
              Foul RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoublePersonalFoul(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // foul ::= foul_type foul_total 
            {
              Foul RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FoulType f = (FoulType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Foul(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // rebound ::= REBOUND_LITERAL 
            {
              Rebound RESULT =null;
		 RESULT = new Rebound(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rebound",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // rebound ::= REBOUND_LITERAL LEFT_PAREN OFF_LITERAL COLON NUMBER DEF COLON NUMBER RIGHT_PAREN 
            {
              Rebound RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Rebound(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rebound",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // turnover_ending ::= LEFT_PAREN T_LITERAL POUND_SIGN NUMBER RIGHT_PAREN 
            {
              TurnoverEnding RESULT =null;
		 RESULT = new TeamTurnover(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_ending",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // turnover_ending ::= LEFT_PAREN P_LITERAL NUMBER PERIOD T_LITERAL NUMBER RIGHT_PAREN 
            {
              TurnoverEnding RESULT =null;
		 RESULT = new PlayerTurnover(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_ending",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // turnover_type ::= TURNOVER_LITERAL COLON 
            {
              TurnoverType RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // turnover_type ::= TURNOVER_LITERAL COLON BACKCOURT_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BackcourtTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // turnover_type ::= TURNOVER_LITERAL COLON EXCESS_LITERAL TIMEOUT_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new ExcessTimeoutTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // turnover_type ::= TURNOVER_LITERAL COLON LOST_LITERAL BALL_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // turnover_type ::= TURNOVER_LITERAL COLON INBOUND_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new InboundTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // turnover_type ::= TURNOVER_LITERAL COLON NUMBER SECOND_LITERAL INBOUND_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new InboundTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // turnover_type ::= TURNOVER_LITERAL COLON TRAVELING_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new TravelingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // turnover_type ::= TURNOVER_LITERAL COLON NUMBER SECOND_LITERAL VIOLATION_LITERAL 
            {
              TurnoverType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new SecViolationTO(Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // turnover_type ::= TURNOVER_LITERAL COLON BAD_LITERAL PASS_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BadPassTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // turnover_type ::= TURNOVER_LITERAL COLON SHOT_LITERAL CLOCK_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new ShotClockTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // turnover_type ::= SWINGING_LITERAL ELBOWS_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new SwingingElbowsTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // turnover_type ::= OPPOSITE_LITERAL BASKET_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OppositeTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // turnover_type ::= OUT_LITERAL OF_LITERAL BOUNDS_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OOBTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // turnover_type ::= JUMP_LITERAL BALL_LITERAL VIOLATION_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new JumpBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // turnover_type ::= ILLEGAL_LITERAL ASSIST_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new IllegalAssistTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // turnover_type ::= NO_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new NoTurnoverTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // turnover_type ::= DOUBLE_LITERAL PERSONAL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DoublePersonalTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // turnover_type ::= KICKED_LITERAL BALL_LITERAL VIOLATION_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new KickedBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // turnover_type ::= INBOUND_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new InboundTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // turnover_type ::= LANE_LITERAL VIOLATION_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LaneViolationTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // turnover_type ::= DOUBLE_LITERAL DRIBBLE_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DoubleDribbleTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // turnover_type ::= OFFENSIVE_LITERAL FOUL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OffensiveFoulTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // turnover_type ::= OFFENSIVE_LITERAL GOALTENDING_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OffensiveGoaltendingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // turnover_type ::= FOUL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new FoulTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // turnover_type ::= BACKCOURT_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BackcourtTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // turnover_type ::= ILLEGAL_LITERAL SCREEN_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new IllegalScreenTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // turnover_type ::= DISCONTINUE_LITERAL DRIBBLE_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DiscontinueDribbleTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // turnover_type ::= POSS_LITERAL LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new PossLostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // turnover_type ::= NUMBER SECOND_LITERAL VIOLATION_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new SecViolationTO(Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // turnover_type ::= STEP_LITERAL OUT_LITERAL OF_LITERAL BOUNDS_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new StepOOBTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // turnover_type ::= OUT_LITERAL OF_LITERAL BOUNDS_LITERAL LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OOBLostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // turnover_type ::= PALMING_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new PalmingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // turnover_type ::= TRAVELING_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new TravelingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // turnover_type ::= BAD_LITERAL PASS_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BadPassTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // turnover_type ::= LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // turnover ::= turnover_type turnover_ending 
            {
              Turnover RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TurnoverType tt = (TurnoverType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TurnoverEnding te = (TurnoverEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Turnover(tt,te); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // assist_statement ::= 
            {
              Assist RESULT =null;
		 RESULT = new Assist(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assist_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // assist_statement ::= LEFT_PAREN player_statement NUMBER ASSIST RIGHT_PAREN 
            {
              Assist RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Assist(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assist_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // point_total ::= LEFT_PAREN NUMBER POINTS RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("point_total",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // shot_ending ::= 
            {
              ShotEnding RESULT =null;
		 RESULT = new ShotEnding(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_ending",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // shot_ending ::= point_total assist_statement 
            {
              ShotEnding RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assist a = (Assist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShotEnding(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_ending",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // shot_type ::= REVERSE_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // shot_type ::= FADEAWAY_LITERAL JUMPER_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fadeaway Jumper"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // shot_type ::= FADEAWAY_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fadeaway Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // shot_type ::= FADEAWAY_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fadeaway Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // shot_type ::= TURNAROUND_LITERAL FADEAWAY_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Fadeaway Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // shot_type ::= TURNAROUND_LITERAL FADEAWAY_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Fadeaway"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // shot_type ::= PUTBACK_LITERAL REVERSE_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Reverse Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // shot_type ::= DRIVING_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // shot_type ::= TURNAROUND_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // shot_type ::= PULLUP_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Pullup Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // shot_type ::= RUNNING_LITERAL TIP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Tip Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // shot_type ::= PUTBACK_LITERAL SLAM_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Slam Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // shot_type ::= RUNNING_LITERAL REVERSE_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Reverse Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // shot_type ::= RUNNING_LITERAL SLAM_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Slam Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // shot_type ::= RUNNING_LITERAL FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Finger Roll Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // shot_type ::= RUNNING_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // shot_type ::= TURNAROUND_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // shot_type ::= FADE_LITERAL AWAY_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fade Away Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // shot_type ::= JUMP_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // shot_type ::= DRIVING_LITERAL SLAM_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Slam Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // shot_type ::= RUNNING_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // shot_type ::= DRIVING_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // shot_type ::= DRIVING_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // shot_type ::= RUNNING_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // shot_type ::= DRIVING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // shot_type ::= RUNNING_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // shot_type ::= JUMP_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // shot_type ::= FLOATING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Floating Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // shot_type ::= JUMP_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // shot_type ::= DRIVING_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // shot_type ::= REVERSE_LITERAL SLAM_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Slam Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // shot_type ::= FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Finger Roll Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // shot_type ::= RUNNING_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // shot_type ::= TURNAROUND_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // shot_type ::= REVERSE_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // shot_type ::= STEP_LITERAL BACK_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Step Back Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // shot_type ::= PUTBACK_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // shot_type ::= PUTBACK_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // shot_type ::= TURNAROUND_LITERAL FADE_LITERAL AWAY_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Fade Away Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // shot_type ::= FADE_LITERAL AWAY_LITERAL JUMPER_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fade Away Jumper Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // shot_type ::= ALLEY_LITERAL OOP_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Alley Oop Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // shot_type ::= ALLEY_LITERAL OOP_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Alley Oop Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // shot_type ::= SLAM_LITERAL DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Slam Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // shot_type ::= HOOK_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Hook Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // shot_type ::= DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // shot_type ::= DRIVING_LITERAL FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Finger Roll Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // shot_type ::= TURNAROUND_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // shot_type ::= HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // shot_type ::= DRIVING_LITERAL REVERSE_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Reverse Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // shot_type ::= TIP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Tip Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // shot_type ::= PULLUP_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Pullup Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // shot_type ::= DRIVING_LITERAL LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // shot_type ::= LAYUP_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Layup"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // shot_type ::= RUNNING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // shot_type ::= JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // shot_type ::= THREEPT_LITERAL DRIVING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Driving Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // shot_type ::= THREEPT_LITERAL PULLUP_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Pullup Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // shot_type ::= THREEPT_LITERAL FADEAWAY_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Fadeaway Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // shot_type ::= THREEPT_LITERAL TIP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Tip Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // shot_type ::= THREEPT_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // shot_type ::= THREEPT_LITERAL FLOATING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Floating Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // shot_type ::= THREEPT_LITERAL TURNAROUND_LITERAL FADEAWAY_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Turnaround Fadeaway"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // shot_type ::= THREEPT_LITERAL TURNAROUND_LITERAL FADEAWAY_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Turnaround Fadeaway Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // shot_type ::= THREEPT_LITERAL TURNAROUND_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Turnaround Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // shot_type ::= THREEPT_LITERAL JUMP_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Jump Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // shot_type ::= THREEPT_LITERAL RUNNING_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Running Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // shot_type ::= THREEPT_LITERAL FADEAWAY_LITERAL JUMPER_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Fadeaway Jumper"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // shot_type ::= THREEPT_LITERAL STEP_LITERAL BACK_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Step Back Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // shot_type ::= THREEPT_LITERAL PULLUP_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Pullup Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // shot_type ::= THREEPT_LITERAL RUNNING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Running Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // shot_type ::= THREEPT_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // shot_type ::= THREEPT_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShot("3pt Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // shot ::= shot_type shot_ending 
            {
              Shot RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ShotType t = (ShotType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ShotEnding o = (ShotEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Shot(t, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // shot ::= NUMBER SINGLE_QUOTE shot_type shot_ending 
            {
              Shot RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ShotType t = (ShotType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ShotEnding o = (ShotEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Shot(t, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // jump_ball_player ::= 
            {
              Player RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_player",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // jump_ball_player ::= player_statement 
            {
              Player RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_player",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // jump_ball_ending ::= 
            {
              JumpBallEnding RESULT =null;
		 RESULT = new JumpBallEnding(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_ending",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // jump_ball_ending ::= COLON TIP_LITERAL TO_LITERAL jump_ball_player 
            {
              JumpBallEnding RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JumpBallEnding(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_ending",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // jump_ball ::= JUMP_LITERAL BALL_LITERAL player_statement VS_LITERAL player_statement jump_ball_ending 
            {
              JumpBall RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JumpBallEnding e = (JumpBallEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JumpBall(p1, p2, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // play_type ::= review 
            {
              PlayType RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Review rv = (Review)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // play_type ::= steal 
            {
              PlayType RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Steal stl = (Steal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // play_type ::= block 
            {
              PlayType RESULT =null;
		int blkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block blk = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = blk; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // play_type ::= timeout 
            {
              PlayType RESULT =null;
		int timeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Timeout time = (Timeout)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = time; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // play_type ::= ejection 
            {
              PlayType RESULT =null;
		int ejleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ejright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ejection ej = (Ejection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ej; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // play_type ::= violation 
            {
              PlayType RESULT =null;
		int violeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Violation vio = (Violation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vio; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // play_type ::= technical 
            {
              PlayType RESULT =null;
		int techleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int techright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Technical tech = (Technical)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tech; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // play_type ::= free_throw 
            {
              PlayType RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FreeThrow ft = (FreeThrow)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ft; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // play_type ::= substitution 
            {
              PlayType RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Substitution sub = (Substitution)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sub; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // play_type ::= foul 
            {
              PlayType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Foul f = (Foul)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // play_type ::= rebound 
            {
              PlayType RESULT =null;
		int rbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Rebound rb = (Rebound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // play_type ::= turnover 
            {
              PlayType RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Turnover to = (Turnover)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = to; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // play_type ::= shot 
            {
              PlayType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Shot s = (Shot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // play_type ::= jump_ball 
            {
              PlayType RESULT =null;
		int jbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JumpBall jb = (JumpBall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = jb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // player_statement_p ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement_p",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // player_statement_p ::= PLAYER_NAME player_statement_p 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s1 + " " + s2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement_p",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // player_statement ::= PLAYER_NAME player_statement_p 
            {
              Player RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Player(s1 + " " + s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // play ::= play_type context_info 
            {
              Play RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlayType pt = (PlayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ContextInfo ci = (ContextInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Play(pt, ci); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // play ::= MISS_LITERAL player_statement play_type context_info 
            {
              Play RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player ps = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlayType pt = (PlayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ContextInfo ci = (ContextInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MissedPlay(pt, ci, ps); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // play ::= player_statement play_type context_info 
            {
              Play RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player ps = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PlayType pt = (PlayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ContextInfo ci = (ContextInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayerPlay(pt, ci, ps); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // plays_p ::= 
            {
              ArrayList<Play> RESULT =null;
		 RESULT = new ArrayList<Play>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays_p",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // plays_p ::= play plays_p 
            {
              ArrayList<Play> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Play p1 = (Play)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Play> p2 = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Play> playList = new ArrayList<Play>();
				   playList.add(p1);
                                   playList.addAll(p2);
                                   RESULT = playList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays_p",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // plays ::= play plays_p 
            {
              ArrayList<Play> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Play p1 = (Play)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Play> p2 = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Play> playList = new ArrayList<Play>();
				   playList.add(p1);
                                   playList.addAll(p2);
                                   RESULT = playList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // part_of_day ::= AM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_of_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // part_of_day ::= PM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_of_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // real_time ::= LEFT_PAREN TIME part_of_day EST RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("real_time",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // period_type ::= OVERTIME 
            {
              String RESULT =null;
		 RESULT = "Overtime"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // period_type ::= PERIOD_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Period"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // period_identifier ::= SIXTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // period_identifier ::= FIFTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // period_identifier ::= FOURTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // period_identifier ::= THIRD 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // period_identifier ::= SECOND 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // period_identifier ::= FIRST 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // end_of_period ::= END_LITERAL OF_LITERAL period_identifier period_type real_time context_info 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_of_period",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // start_of_period ::= review context_info start_of_period 
            {
              PeriodIdentification RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PeriodIdentification s = (PeriodIdentification)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_of_period",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // start_of_period ::= START_LITERAL OF_LITERAL period_identifier period_type real_time context_info 
            {
              PeriodIdentification RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PeriodIdentification(s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_of_period",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // period ::= start_of_period plays end_of_period 
            {
              Period RESULT =null;
		int pi1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pi1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PeriodIdentification pi1 = (PeriodIdentification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Play> pl = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Period(pi1, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // periods_p ::= 
            {
              ArrayList<Period> RESULT =null;
		 RESULT = new ArrayList<Period>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // periods_p ::= period periods_p 
            {
              ArrayList<Period> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Period p1 = (Period)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p2 = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Period> periodList = new ArrayList<Period>();
				   periodList.add(p1);
                                   periodList.addAll(p2);
                                   RESULT = periodList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // periods ::= period periods_p 
            {
              ArrayList<Period> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Period p1 = (Period)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p2 = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Period> periodList = new ArrayList<Period>();
				   periodList.add(p1);
                                   periodList.addAll(p2);
                                   RESULT = periodList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= game EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Game start_val = (Game)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // game ::= periods 
            {
              Game RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Game(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("game",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

